name: Build ARM64 Hybrid (Static FFmpeg + Shared Qt)

on:
  push:
    branches: [ "main", "dev" ]
    paths:
      - 'src/**'
      - 'CMakeLists.txt'
      - 'build-script/build-sharedlib-app.sh'
      - 'build-script/build-missing-qt-components.sh'
      - '.github/workflows/arm64shared-lib-build.yml'
  pull_request:
    branches: [ "main", "dev" ]
    paths:
      - 'device/**'
      - 'host/**'
      - 'video/**'
      - 'input/**'
      - 'network/**'
      - 'ui/**'
      - 'utils/**'
      - 'serial/**'
      - 'target/**'
      - 'ui/**'
      - 'usb/**'
      - 'CMakeLists.txt'
      - 'build-script/build-sharedlib-app.sh'
      - 'build-script/build-missing-qt-components.sh'
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  ARTIFACT_NAME: openterface-qt.linux.arm64.deb
  BUILD_TYPE: Release

jobs:
  call-base-build:
    uses: ./.github/workflows/arm64-base-build.yml
    secrets: inherit

  build-arm64-shared:
    runs-on: ubuntu-latest
    needs: call-base-build
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for version detection

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ARM64 with static FFmpeg in base container
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ghcr.io/${{ github.actor }}/openterface-arm64-base:latest \
            bash -c "
              # Set non-interactive mode
              export DEBIAN_FRONTEND=noninteractive
              export CI=true
              
              # Install Qt6 and other shared libraries (FFmpeg static libs already in base image)
              apt-get update && apt-get install -y \
                qt6-base-dev qt6-base-dev-tools \
                qt6-multimedia-dev qt6-serialport-dev qt6-svg-dev qt6-tools-dev \
                libusb-1.0-0-dev libudev-dev \
                libgl-dev libxcb-cursor-dev libxkbcommon-dev \
                libdbus-1-dev libfontconfig1-dev libfreetype-dev \
                libx11-dev libxcb1-dev libxext-dev libxfixes-dev \
                libxrandr-dev libxrender-dev libegl-dev \
                libxcb-cursor0 libxcb-icccm4 libxcb-icccm4-dev \
                libxcb-image0 libxcb-image0-dev libxcb-keysyms1 \
                libxcb-keysyms1-dev libxcb-render-util0 \
                libxcb-render-util0-dev libxcb-render0-dev \
                libxcb-shm0-dev libxcb-util1 libxfixes-dev \
                libxi-dev libx11-xcb-dev libxkbcommon-x11-dev \
                libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev \
                libxcb-glx0-dev libxcb-xfixes0-dev \
                libxcb-xinerama0-dev libxcb-xkb-dev libxcb-util-dev \
                dpkg-dev
              
              # Verify static FFmpeg libraries are available
              echo 'Verifying static FFmpeg libraries...'
              ls -la /usr/local/lib/libav*.a
              ls -la /usr/local/include/libav*
              
              # Make scripts executable
              chmod +x build-script/build-sharedlib-app.sh
              chmod +x build-script/build-missing-qt-components.sh
              
              # Run the build script with static FFmpeg + shared Qt
              echo 'Building application with static FFmpeg + shared Qt...'
              ./build-script/build-sharedlib-app.sh build-arm64
            "

      - name: Create Debian package
        run: |
          # Get version information from version.h
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h || echo "1.0.0")
          PACKAGE_NAME="openterfaceQT"
          ARCHITECTURE="arm64"
          DEB_NAME="${PACKAGE_NAME}_${VERSION}_${ARCHITECTURE}.deb"
          
          # Create Debian package structure
          mkdir -p debian-package/DEBIAN
          mkdir -p debian-package/usr/bin
          mkdir -p debian-package/usr/share/applications
          mkdir -p debian-package/usr/share/pixmaps
          mkdir -p debian-package/usr/share/icons/hicolor/128x128/apps
          mkdir -p debian-package/usr/share/doc/${PACKAGE_NAME}
          
          # Copy the binary
          find build-arm64 -name "openterfaceQT" -type f -executable -exec cp {} debian-package/usr/bin/ \; 2>/dev/null || {
            echo "Error: openterfaceQT binary not found in build-arm64"
            exit 1
          }
          
          # Make binary executable
          chmod +x debian-package/usr/bin/openterfaceQT
          
          # Copy desktop file if it exists
          if [ -f "com.openterface.openterfaceQT.desktop" ]; then
            cp com.openterface.openterfaceQT.desktop debian-package/usr/share/applications/
          else
            # Create a basic desktop file
            cat > debian-package/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Name=Openterface QT
          Comment=OpenterfaceQT Mini-KVM Linux Edition
          Exec=/usr/bin/openterfaceQT
          Icon=com.openterface.openterfaceQT
          Terminal=false
          Type=Application
          Categories=Utility;
          EOF
          fi
          
          # Copy icon if it exists - check multiple possible locations
          ICON_COPIED=false
          # Use consistent naming: match the desktop file's expectation
          if [ -f "images/icon_256.png" ]; then
            cp images/icon_256.png debian-package/usr/share/pixmaps/com.openterface.openterfaceQT.png
            ICON_COPIED=true
            echo "✅ Copied icon from images/icon_256.png"
          elif [ -f "images/icon_128.png" ]; then
            cp images/icon_128.png debian-package/usr/share/pixmaps/com.openterface.openterfaceQT.png
            ICON_COPIED=true
            echo "✅ Copied icon from images/icon_128.png"
          elif [ -f "images/icon_64.png" ]; then
            cp images/icon_64.png debian-package/usr/share/pixmaps/com.openterface.openterfaceQT.png
            ICON_COPIED=true
            echo "✅ Copied icon from images/icon_64.png"
          elif [ -f "resources/icon_128.png" ]; then
            cp resources/icon_128.png debian-package/usr/share/pixmaps/com.openterface.openterfaceQT.png
            ICON_COPIED=true
            echo "✅ Copied icon from resources/icon_128.png"
          else
            echo "⚠️ Warning: No icon file found for packaging"
          fi
          
          # Also copy to hicolor icon theme structure for better desktop integration
          if [ "$ICON_COPIED" = true ]; then
            cp debian-package/usr/share/pixmaps/com.openterface.openterfaceQT.png debian-package/usr/share/icons/hicolor/128x128/apps/com.openterface.openterfaceQT.png
            echo "✅ Icon also installed to hicolor theme directory"
          fi
          
          # Copy documentation
          if [ -f "README.md" ]; then
            cp README.md debian-package/usr/share/doc/${PACKAGE_NAME}/
          fi
          if [ -f "LICENSE" ]; then
            cp LICENSE debian-package/usr/share/doc/${PACKAGE_NAME}/copyright
          fi
          
          # Get installed size
          INSTALLED_SIZE=$(du -sk debian-package | cut -f1)
          
          # Use existing control file and substitute variables
          if [ -f "packaging/debian/control" ]; then
            # Copy and substitute variables in the control file
            sed -e "s/\${VERSION}/${VERSION}/g" \
                -e "s/\${ARCH}/${ARCHITECTURE}/g" \
                packaging/debian/control > debian-package/DEBIAN/control
            
            # Add installed size to control file
            echo "Installed-Size: ${INSTALLED_SIZE}" >> debian-package/DEBIAN/control
          else
            # Fallback to inline control file if packaging/debian/control doesn't exist
            cat > debian-package/DEBIAN/control << EOF
          Package: openterfaceQT
          Version: ${VERSION}
          Section: base
          Priority: optional
          Architecture: ${ARCHITECTURE}
          Depends: libqt6core6 (>= 6.4.2), libqt6multimedia6 (>= 6.4.2), libqt6multimediawidgets6 (>= 6.4.2), libqt6serialport6 (>= 6.4.2), libqt6svg6 (>= 6.4.2)
          Maintainer: TechxArtisan <info@techxartisan.com>
          Description: OpenterfaceQT Mini-KVM Linux Edition
          Installed-Size: ${INSTALLED_SIZE}
          EOF
          fi
          
          # Build the deb package
          dpkg-deb --build debian-package ${DEB_NAME}
          
          # Create artifacts directory and copy deb file
          mkdir -p artifacts
          cp ${DEB_NAME} artifacts/
          
          # Create build info
          echo "Build Date: $(date)" > artifacts/BUILD_INFO.txt
          echo "Git Commit: ${{ github.sha }}" >> artifacts/BUILD_INFO.txt
          echo "Git Branch: ${{ github.ref_name }}" >> artifacts/BUILD_INFO.txt
          echo "Architecture: arm64" >> artifacts/BUILD_INFO.txt
          echo "Build Type: ${{ env.BUILD_TYPE }}" >> artifacts/BUILD_INFO.txt
          echo "Package Version: ${VERSION}" >> artifacts/BUILD_INFO.txt
          echo "Package Name: ${DEB_NAME}" >> artifacts/BUILD_INFO.txt
          echo "Package Size: $(ls -lh ${DEB_NAME} | awk '{print $5}')" >> artifacts/BUILD_INFO.txt
          
          # List package contents
          echo "=== Package Contents ===" >> artifacts/BUILD_INFO.txt
          dpkg-deb --contents ${DEB_NAME} >> artifacts/BUILD_INFO.txt

      - name: Verify Debian package
        run: |
          if [ -f "artifacts/"*.deb ]; then
            DEB_FILE=$(find artifacts -name "*.deb" | head -n1)
            echo "Verifying Debian package: $DEB_FILE"
            
            # Check package info
            echo "=== Package Information ==="
            dpkg-deb --info "$DEB_FILE"
            
            # Check package contents
            echo "=== Package Contents ==="
            dpkg-deb --contents "$DEB_FILE"
            
            # Verify binary architecture in package
            echo "=== Binary Architecture Verification ==="
            dpkg-deb --fsys-tarfile "$DEB_FILE" | tar -xf - ./usr/bin/openterfaceQT
            file ./usr/bin/openterfaceQT
            
            if file ./usr/bin/openterfaceQT | grep -q "aarch64\|ARM aarch64"; then
              echo "✅ Verified ARM64 binary in package"
            else
              echo "❌ Binary in package is not ARM64!"
              exit 1
            fi
            
            # Clean up extracted binary
            rm -f ./usr/bin/openterfaceQT
            rmdir ./usr/bin ./usr 2>/dev/null || true
            
            echo "✅ Debian package verification successful"
          else
            echo "❌ No .deb file found in artifacts"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: artifacts/
          retention-days: 30

      - name: Create release archive
        if: github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
        run: |
          cd artifacts
          
          # Find the deb file
          DEB_FILE=$(find . -name "*.deb" | head -n1)
          if [ -n "$DEB_FILE" ]; then
            # Create release archive with deb file
            tar -czf ../${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz .
            cd ..
            
            # Generate checksums
            sha256sum ${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz > checksums.txt
            sha256sum artifacts/*.deb >> checksums.txt
          else
            echo "No .deb file found for release"
            exit 1
          fi

      - name: Upload release archive
        if: github.event_name == 'push' && (github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/'))
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-release
          path: |
            ${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz
            checksums.txt
          retention-days: 90

      - name: Output build summary
        run: |
          echo "## ARM64 Debian Package Build Summary (Static FFmpeg + Shared Qt)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture: ARM64 (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- Package Type: Debian (.deb)" >> $GITHUB_STEP_SUMMARY
          echo "- FFmpeg: Static libraries (from base image)" >> $GITHUB_STEP_SUMMARY
          echo "- Qt Libraries: Shared libraries (system packages)" >> $GITHUB_STEP_SUMMARY
          echo "- Git Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Git Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show package information
          DEB_FILE=$(find artifacts -name "*.deb" | head -n1)
          if [ -n "$DEB_FILE" ]; then
            echo "**Debian Package Information:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            dpkg-deb --info "$DEB_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Package Contents:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            dpkg-deb --contents "$DEB_FILE" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find artifacts -type f -exec ls -la {} \; >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          if [ -f "artifacts/BUILD_INFO.txt" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Build Details:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat artifacts/BUILD_INFO.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi