---
  name: Portable Build for linux
  
  on:
    push:
      branches: ["main", "dev"]
    pull_request:
      branches: ["dev"]
    workflow_dispatch:
  
  defaults:
    run:
      shell: bash
  
  env:
    ARTIFACT: openterfaceQT.linux.amd64.portable
    SOURCE_DIR: ${{ github.workspace }}
    QT_VERSION: 6.6.3 
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
  
        - name: Cache Qt Build
          id: cache-qt
          uses: actions/cache@v3
          with:
            path: /opt/Qt6
            key: qt-${{ env.QT_VERSION }}-linux-static
            restore-keys: |
              qt-${{ env.QT_VERSION }}-linux-static

        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.10'
  
        - name: Build Qt Statically
          if: steps.cache-qt.outputs.cache-hit != 'true'
          run: |
            bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-from-source.sh
  
        - name: Create build directory
          run: |
            mkdir ${{ runner.temp }}/build
            
        - name: Build libpcre2 from source
          run: |
            # Create build directories
            mkdir -p ${{ runner.temp }}/pcre2-build
            mkdir -p ${{ runner.temp }}/pcre2-install
            
            # Download and extract PCRE2
            cd ${{ runner.temp }}
            wget https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.gz
            tar xf pcre2-10.42.tar.gz
            
            # Build PCRE2 with 16-bit support
            cd ${{ runner.temp }}/pcre2-build
            cmake ${{ runner.temp }}/pcre2-10.42 \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DPCRE2_BUILD_PCRE2_16=ON \
              -DPCRE2_BUILD_PCRE2_8=ON \
              -DPCRE2_BUILD_PCRE2_32=OFF \
              -DPCRE2_SUPPORT_JIT=ON \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/pcre2-install
            
            cmake --build . --config Release
            cmake --install .
            
            echo "PCRE2 build complete - installed to ${{ runner.temp }}/pcre2-install"
            ls -la ${{ runner.temp }}/pcre2-install/lib/

        - name: Prepare Driver Files
          run: |
            mkdir ${{ env.SOURCE_DIR }}/drivers
            cp driver/linux/* ${{ env.SOURCE_DIR }}/drivers/
        
        - name: Install OpenGL ES Development Packages
          run: |
            sudo apt-get update
            sudo apt-get install -y \
              libgles2-mesa-dev \
              libegl1-mesa-dev \
              libglib2.0-dev \
              libpcre2-dev \
              libpcre2-16-0 \
              libxrandr2 \
              libxcb1-dev \
              '^libxcb.*-dev' \
              libx11-xcb-dev \
              libglu1-mesa-dev \
              libxrender-dev \
              libxi-dev \
              libxkbcommon-dev \
              libxkbcommon-x11-dev \
              libexpat-dev \
              libfreetype6-dev \
              libfontconfig1-dev \
              libx11-dev \
              libdbus-1-dev \
              libdbus-glib-1-dev \
              libpulse-dev \
              libsndfile1-dev \
              libxrandr-dev \
              libxrender-dev \
              libexpat1-dev \
              libdrm-dev \
              libgbm-dev \
              libatspi2.0-dev \
              upx-ucl

        - name: Analyze original binary size (if exists)
          run: |
            if [ -f ${{ runner.temp }}/build/openterfaceQT ]; then
              ls -lh ${{ runner.temp }}/build/openterfaceQT
            fi
  
        - name: Build Portable Executable
          working-directory: ${{ runner.temp }}/build
  
          run: |
            echo "Setting LD_LIBRARY_PATH..."
            export LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
  
            echo "Configuring with CMake..."
            cmake -S "${{ env.SOURCE_DIR }}" -B . \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_SHARED_LIBS=OFF \
                -DCMAKE_PREFIX_PATH="/opt/Qt6;${{ runner.temp }}/pcre2-install" \
                -DCMAKE_INSTALL_PREFIX=release \
                -DCMAKE_POLICY_DEFAULT_CMP0177=NEW \
                -DCMAKE_POLICY_DEFAULT_CMP0174=NEW \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DQT_DEBUG_FIND_PACKAGE=ON \
                -DCMAKE_CXX_FLAGS="-Os -ffunction-sections -fdata-sections -I${{ runner.temp }}/pcre2-install/include" \
                -DCMAKE_C_FLAGS="-Os -ffunction-sections -fdata-sections -I${{ runner.temp }}/pcre2-install/include" \
                -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -L${{ runner.temp }}/pcre2-install/lib -lpcre2-16 -lpcre2-8" \
                -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON
  
            echo "Building with CMake..."
            cmake --build . --verbose || (echo "CMake build failed. Please check the build configuration." && exit 1)
  
            if [ ! -f openterfaceQT ]; then
              echo "Error: Failed to build openterfaceQT"
              exit 1
            fi
  
            echo "Creating portable package..."
            mkdir package

            echo "Analyzing binary size before compression..."
            ls -lh openterfaceQT
            
            echo "Compressing binary with UPX..."
            upx --best --lzma openterfaceQT
            
            echo "Analyzing binary size after compression..."
            ls -lh openterfaceQT
            
            cp openterfaceQT package
  
        - name: Save build artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.ARTIFACT }}
            path: ${{ runner.temp }}/build/package/openterfaceQT
            if-no-files-found: error