---
  name: Portable Build for linux
  
  on:
    push:
      branches: ["main", "dev"]
    pull_request:
      branches: ["dev"]
    workflow_dispatch:
  
  defaults:
    run:
      shell: bash
  
env:
  ARTIFACT: openterfaceQT.linux.amd64.portable
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.6.3 
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/openterface-qt

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Static Qt Docker Image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest

      - name: Install host tools for packaging
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 upx-ucl

      - name: Build Portable Executable in Docker
        run: |
          # Create build directory on host for artifact collection
          mkdir -p ${{ runner.temp }}/build
          
          # Build application using Static Qt Docker environment
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            bash -c "
              echo 'Building Openterface QT Application (Static Qt)...'
              
              # Update translations
              /opt/Qt6/bin/lupdate openterfaceQT.pro -no-obsolete || echo 'lupdate failed, continuing...'
              
              # Release translations
              /opt/Qt6/bin/lrelease openterfaceQT.pro || echo 'lrelease failed, continuing...'
              
              # Configure and build with CMake (static linking)
              cd /workspace/build
              cmake -S /workspace/src -B . \\
                  -DCMAKE_BUILD_TYPE=Release \\
                  -DBUILD_SHARED_LIBS=OFF \\
                  -DCMAKE_PREFIX_PATH=/opt/Qt6 \\
                  -DCMAKE_INSTALL_PREFIX=release \\
                  -DCMAKE_POLICY_DEFAULT_CMP0177=NEW \\
                  -DCMAKE_POLICY_DEFAULT_CMP0174=NEW \\
                  -DCMAKE_VERBOSE_MAKEFILE=ON \\
                  -DQT_DEBUG_FIND_PACKAGE=ON \\
                  -DCMAKE_CXX_FLAGS='-Os -ffunction-sections -fdata-sections' \\
                  -DCMAKE_C_FLAGS='-Os -ffunction-sections -fdata-sections' \\
                  -DCMAKE_EXE_LINKER_FLAGS='-Wl,--gc-sections -Wl,--strip-all' \\
                  -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \\
                  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \\
                  -DFFMPEG_LIBRARIES='/opt/Qt6/lib/libavformat.a;/opt/Qt6/lib/libavcodec.a;/opt/Qt6/lib/libavutil.a;/opt/Qt6/lib/libswresample.a;/opt/Qt6/lib/libswscale.a' \\
                  -DFFMPEG_INCLUDE_DIRS=/opt/Qt6/include
              
              # Build the application
              VERBOSE=1 cmake --build . || { echo 'CMake build failed'; exit 1; }
              
              # Verify build output
              if [ ! -f openterfaceQT ]; then
                echo 'Error: Failed to build openterfaceQT'
                exit 1
              fi
              
              echo 'Analyzing binary size before compression...'
              ls -lh openterfaceQT
            "
          
          # Compress the binary on the host (since UPX may not be in Docker)
          echo "Compressing binary with UPX..."
          upx --best --lzma ${{ runner.temp }}/build/openterfaceQT
          
          echo "Analyzing binary size after compression..."
          ls -lh ${{ runner.temp }}/build/openterfaceQT
          
          # Create portable package
          mkdir -p ${{ runner.temp }}/build/package
          cp ${{ runner.temp }}/build/openterfaceQT ${{ runner.temp }}/build/package/openterfaceQT-portable

      - name: Install AppImage tools
        run: |
          wget -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -O linuxdeploy-plugin-qt-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool
          sudo mv linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool /usr/local/bin/

      - name: Create AppImage
        working-directory: ${{ runner.temp }}
        run: |
            # Create AppDir structure
            mkdir -p AppDir/usr/bin
            mkdir -p AppDir/usr/share/applications
            mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
            mkdir -p AppDir/usr/share/metainfo
            
            # Copy executable
            cp ${{ runner.temp }}/build/openterfaceQT AppDir/usr/bin/
            
            # Copy icon
            cp ${{ env.SOURCE_DIR }}/images/icon_256.png AppDir/usr/share/icons/hicolor/256x256/apps/com.openterface.openterfaceQT.png
            
            # Copy desktop file from packaging/appimage folder
            cp ${{ env.SOURCE_DIR }}/com.openterface.openterfaceQT.desktop AppDir/usr/share/applications/
            
            # Copy and prepare AppStream metadata
            TODAY=$(date +'%Y-%m-%d')
            VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' ${{ env.SOURCE_DIR }}/resources/version.h)
            sed -e "s/\${VERSION}/$VERSION/g" \
                -e "s/\${DATE}/$TODAY/g" \
                ${{ env.SOURCE_DIR }}/com.openterface.openterfaceQT.metainfo.xml > AppDir/usr/share/metainfo/com.openterface.openterfaceQT.metainfo.xml
            
             linuxdeploy-x86_64.AppImage \
                --appdir=AppDir \
                --desktop-file=AppDir/usr/share/applications/com.openterface.openterfaceQT.desktop \
                --icon-file=AppDir/usr/share/icons/hicolor/256x256/apps/com.openterface.openterfaceQT.png 

            appimagetool AppDir "openterfaceQT.linux.amd64.AppImage"
            
            # Check if AppImage was created
            if [ ! -f "openterfaceQT.linux.amd64.AppImage" ]; then
              echo "ERROR: Failed to create AppImage"
              exit 1
            fi

      - name: Save build artifact (Portable)
        uses: actions/upload-artifact@v4
        with:
            name: ${{ env.ARTIFACT }}
            path: |
              ${{ runner.temp }}/build/package/openterfaceQT-portable
            if-no-files-found: error

      - name: Save build artifact (AppImage)
        uses: actions/upload-artifact@v4
        with:
            name: ${{ env.ARTIFACT }}.AppImage
            path: |
              ${{ runner.temp }}/openterfaceQT.linux.amd64.AppImage
            if-no-files-found: error