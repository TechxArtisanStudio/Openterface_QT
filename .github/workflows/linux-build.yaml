name: Linux Build

# This workflow depends on pre-built Docker images from build-qt-environments.yml
# Ensure that workflow has been run successfully before running this build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of Qt build to use'
        required: true
        default: 'both'
        type: choice
        options:
        - 'shared'
        - 'static'
        - 'both'
      ubuntu_version:
        description: 'Ubuntu base image version'
        required: false
        default: '22.04'
        type: choice
        options:
        - '22.04'
        - '24.04'
      architecture:
        description: 'Target architecture'
        required: false
        default: 'both'
        type: choice
        options:
        - 'amd64'
        - 'arm64'
        - 'both'

env:
  ARTIFACT: openterfaceQT
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.6.3
  REGISTRY: ghcr.io

jobs:
  build-shared:
    if: ${{ (github.event.inputs.build_type == 'shared' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch') && (github.event.inputs.architecture == 'amd64' || github.event.inputs.architecture == 'both' || github.event_name != 'workflow_dispatch') }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built shared Qt Docker Image
        run: |
          echo "Pulling pre-built shared Qt Docker image for amd64..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG"
          
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG

            echo "Successfully pulled pre-built shared Qt Docker image for amd64"
          else
            echo "Error: Pre-built shared Qt Docker image not found in registry for amd64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest
          
          # Verify the image was pulled successfully
          docker images | grep openterface-qtbuild-shared || {
            echo "Error: Failed to verify shared Qt Docker image"
            exit 1
          }

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest \
            bash /translation-script.sh

      - name: Build, package via docker-build-shared.sh (amd64)
        run: |
          mkdir -p ${{ runner.temp }}/build-shared
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-shared:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest \
            bash /workspace/src/build-script/docker-build-shared.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-shared" >> $GITHUB_ENV

      - name: Upload shared .deb
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.deb
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.deb
          if-no-files-found: error

      - name: Upload shared .AppImage
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.AppImage
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.AppImage
          if-no-files-found: error

      - name: Upload shared .rpm
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.shared.rpm
          path: ${{ runner.temp }}/build-shared/openterfaceQT_*.rpm
          if-no-files-found: error

  build-static:
    if: ${{ (github.event.inputs.build_type == 'static' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch') && (github.event.inputs.architecture == 'amd64' || github.event.inputs.architecture == 'both' || github.event_name != 'workflow_dispatch') }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential
          sudo apt-get install -y libusb-1.0-0-dev rpm libfuse2 libudev-dev
          
          wget -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -O linuxdeploy-plugin-qt-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool
          sudo mv linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool /usr/local/bin/

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built Static Qt Docker Image
        run: |
          echo "Pulling pre-built Static Qt Docker image..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}-amd64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG
            echo "Successfully pulled pre-built Static Qt Docker image for amd64"
          else
            echo "Error: Pre-built Static Qt Docker image not found in registry for amd64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest
          
          # Verify the image was pulled successfully
          docker images | grep openterface-qtbuild-complete || {
            echo "Error: Failed to verify Static Qt Docker image"
            exit 1
          }

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations (Static)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /translation-script.sh

      - name: Build via docker-build-static.sh (amd64)
        run: |
          mkdir -p ${{ runner.temp }}/build-static
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-static:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /workspace/src/build-script/docker-build-static.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-static" >> $GITHUB_ENV

      - name: Create deb package (Static)
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p package-static/DEBIAN
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.amd64.static"
          
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/amd64/g" \
              ${{ github.workspace }}/packaging/debian/control > package-static/DEBIAN/control
          
          mkdir -p package-static/usr/bin
          cp -r ${{ env.BUILD_DIR }}/openterfaceQT package-static/usr/bin

          mkdir -p package-static/usr/share/icons/hicolor/256x256/apps/
          cp ${{ github.workspace }}/images/icon_256.png package-static/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png

          mkdir -p package-static/usr/share/applications/
          cat > package-static/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF

          mv package-static $PKG_NAME
          dpkg-deb --build $PKG_NAME

      - name: Upload artifact (Static deb)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.static.deb
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.amd64.static.deb
          if-no-files-found: error

      - name: Create rpm package (Static)
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p rpmbuild-static/{SPECS,SOURCES,BUILD,RPMS,SRPMS}
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.amd64.static"
          
          # Copy build output and icon to SOURCES
          cp ${{ env.BUILD_DIR }}/openterfaceQT rpmbuild-static/SOURCES/ || { echo "Failed to copy openterfaceQT!"; exit 1; }
          cp ${{ github.workspace }}/images/icon_256.png rpmbuild-static/SOURCES/ || { echo "Failed to copy icon_256.png!"; exit 1; }
          
          # Debug: Verify files in SOURCES
          ls -lh rpmbuild-static/SOURCES/
          
          # Generate spec file with version and architecture substitutions
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/amd64/g" \
              ${{ github.workspace }}/packaging/rpm/spec > rpmbuild-static/SPECS/openterfaceqt.spec
          
          # Debug: Show generated spec file
          cat rpmbuild-static/SPECS/openterfaceqt.spec
          
          # Build RPM
          rpmbuild --define "_topdir ${{ runner.temp }}/rpmbuild-static" -bb rpmbuild-static/SPECS/openterfaceqt.spec
          
          # Copy the resulting RPM
          find rpmbuild-static/RPMS -name "*.rpm" -exec cp {} ./$PKG_NAME.rpm \;

      - name: Upload RPM artifact (Static)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.static.rpm
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.amd64.static.rpm
          if-no-files-found: error

      - name: Upload AppImage artifact (static from wrapper)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.static.AppImage
          path: ${{ runner.temp }}/build-static/openterfaceQT_*.AppImage
          if-no-files-found: error

      - name: Create Portable Application (No packaging)
        working-directory: ${{ runner.temp }}
        run: |
          PORTABLE_DIR="openterfaceQT.linux.amd64.portable"
          mkdir -p $PORTABLE_DIR
          # Copy the static binary directly to root of portable dir (no bin/ subdirectory)
          cp ${{ env.BUILD_DIR }}/openterfaceQT $PORTABLE_DIR/openterfaceQT-portable
          chmod +x $PORTABLE_DIR/openterfaceQT-portable

          cp ${{ github.workspace }}/LICENSE $PORTABLE_DIR/ || echo "No LICENSE found"


      - name: Upload Portable artifact (No packaging)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.amd64.portable
          path: ${{ runner.temp }}/openterfaceQT.linux.amd64.portable/
          if-no-files-found: error

  build-shared-arm64:
    if: ${{ (github.event.inputs.build_type == 'shared' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch') && (github.event.inputs.architecture == 'arm64' || github.event.inputs.architecture == 'both' || github.event_name != 'workflow_dispatch') }}
    runs-on: [self-hosted, linux, arm64]
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built shared Qt Docker Image
        run: |
          echo "Pulling pre-built shared Qt Docker image for arm64..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}-arm64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG"
          
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG

            echo "Successfully pulled pre-built shared Qt Docker image for arm64"
          else
            echo "Error: Pre-built shared Qt Docker image not found in registry for arm64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest
          
          # Verify the image was pulled successfully
          docker images | grep openterface-qtbuild-shared || {
            echo "Error: Failed to verify shared Qt Docker image"
            exit 1
          }

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest \
            bash /translation-script.sh

      - name: Build, package via docker-build-shared.sh (arm64)
        run: |
          mkdir -p ${{ runner.temp }}/build-shared-arm64
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-shared-arm64:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:latest \
            bash /workspace/src/build-script/docker-build-shared.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-shared-arm64" >> $GITHUB_ENV

      - name: Upload shared arm64 .deb
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.shared.deb
          path: ${{ runner.temp }}/build-shared-arm64/openterfaceQT_*.deb
          if-no-files-found: error

      - name: Upload shared arm64 .AppImage
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.shared.AppImage
          path: ${{ runner.temp }}/build-shared-arm64/openterfaceQT_*.AppImage
          if-no-files-found: error

      - name: Upload shared arm64 .rpm
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.shared.rpm
          path: ${{ runner.temp }}/build-shared-arm64/openterfaceQT_*.rpm
          if-no-files-found: error

  build-static-arm64:
    if: ${{ (github.event.inputs.build_type == 'static' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch') && (github.event.inputs.architecture == 'arm64' || github.event.inputs.architecture == 'both' || github.event_name != 'workflow_dispatch') }}
    runs-on: [self-hosted, linux, arm64]
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential
          sudo apt-get install -y libusb-1.0-0-dev rpm libfuse2 libudev-dev
          
          wget -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -O linuxdeploy-plugin-qt-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool
          sudo mv linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool /usr/local/bin/

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull pre-built Static Qt Docker Image
        run: |
          echo "Pulling pre-built Static Qt Docker image..."
          
          IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '22.04' }}-arm64"
          echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
          
          # Check if image exists in registry
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG > /dev/null 2>&1; then
            echo "Pre-built image found, pulling..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG
            echo "Successfully pulled pre-built Static Qt Docker image for arm64"
          else
            echo "Error: Pre-built Static Qt Docker image not found in registry for arm64"
            echo "Looking for: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG"
            echo "Please run the 'Build Qt Environments' workflow first to build the required Docker images"
            echo "Workflow URL: https://github.com/${{ github.repository }}/actions/workflows/build-qt-environments.yml"
            exit 1
          fi
          
          # Tag the architecture-specific image as latest for local use
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:$IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest
          
          # Verify the image was pulled successfully
          docker images | grep openterface-qtbuild-complete || {
            echo "Error: Failed to verify Static Qt Docker image"
            exit 1
          }

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update and compile translations (Static)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ github.workspace }}/build-script/docker-translation.sh:/translation-script.sh:ro \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /translation-script.sh

      - name: Build via docker-build-static.sh (arm64)
        run: |
          mkdir -p ${{ runner.temp }}/build-static-arm64
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build-static-arm64:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \
            bash /workspace/src/build-script/docker-build-static.sh
          echo "BUILD_DIR=${{ runner.temp }}/build-static-arm64" >> $GITHUB_ENV

      - name: Create deb package (Static arm64)
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p package-static-arm64/DEBIAN
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.arm64.static"
          
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/arm64/g" \
              ${{ github.workspace }}/packaging/debian/control > package-static-arm64/DEBIAN/control
          
          mkdir -p package-static-arm64/usr/bin
          cp -r ${{ env.BUILD_DIR }}/openterfaceQT package-static-arm64/usr/bin

          mkdir -p package-static-arm64/usr/share/icons/hicolor/256x256/apps/
          cp ${{ github.workspace }}/images/icon_256.png package-static-arm64/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png

          mkdir -p package-static-arm64/usr/share/applications/
          cat > package-static-arm64/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF

          mv package-static-arm64 $PKG_NAME
          dpkg-deb --build $PKG_NAME

      - name: Upload artifact (Static arm64 deb)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.static.deb
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.arm64.static.deb
          if-no-files-found: error

      - name: Create rpm package (Static arm64)
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p rpmbuild-static-arm64/{SPECS,SOURCES,BUILD,RPMS,SRPMS}
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.arm64.static"
          
          # Copy build output and icon to SOURCES
          cp ${{ env.BUILD_DIR }}/openterfaceQT rpmbuild-static-arm64/SOURCES/ || { echo "Failed to copy openterfaceQT!"; exit 1; }
          cp ${{ github.workspace }}/images/icon_256.png rpmbuild-static-arm64/SOURCES/ || { echo "Failed to copy icon_256.png!"; exit 1; }
          
          # Debug: Verify files in SOURCES
          ls -lh rpmbuild-static-arm64/SOURCES/
          
          # Generate spec file with version and architecture substitutions
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/arm64/g" \
              ${{ github.workspace }}/packaging/rpm/spec > rpmbuild-static-arm64/SPECS/openterfaceqt.spec
          
          # Debug: Show generated spec file
          cat rpmbuild-static-arm64/SPECS/openterfaceqt.spec
          
          # Build RPM
          rpmbuild --define "_topdir ${{ runner.temp }}/rpmbuild-static-arm64" -bb rpmbuild-static-arm64/SPECS/openterfaceqt.spec
          
          # Copy the resulting RPM
          find rpmbuild-static-arm64/RPMS -name "*.rpm" -exec cp {} ./$PKG_NAME.rpm \;

      - name: Upload RPM artifact (Static arm64)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.static.rpm
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.arm64.static.rpm
          if-no-files-found: error

      - name: Upload AppImage artifact (static arm64 from wrapper)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.static.AppImage
          path: ${{ runner.temp }}/build-static-arm64/openterfaceQT_*.AppImage
          if-no-files-found: error

      - name: Create Portable Application (No packaging)
        working-directory: ${{ runner.temp }}
        run: |
          PORTABLE_DIR="openterfaceQT.linux.arm64.portable"
          mkdir -p $PORTABLE_DIR
          # Copy the static binary directly to root of portable dir (no bin/ subdirectory)
          cp ${{ env.BUILD_DIR }}/openterfaceQT $PORTABLE_DIR/openterfaceQT-portable
          chmod +x $PORTABLE_DIR/openterfaceQT-portable

          cp ${{ github.workspace }}/LICENSE $PORTABLE_DIR/ || echo "No LICENSE found"


      - name: Upload Portable artifact (No packaging)
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.arm64.portable
          path: ${{ runner.temp }}/openterfaceQT.linux.arm64.portable/
          if-no-files-found: error