name: Linux Build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

env:
  ARTIFACT: openterfaceQT
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.4.2

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install prerequisites
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential
          sudo apt-get install -y libusb-1.0-0-dev rpm libfuse2
          
          wget -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget -O linuxdeploy-plugin-qt-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          
          chmod +x linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool
          sudo mv linuxdeploy-x86_64.AppImage linuxdeploy-plugin-qt-x86_64.AppImage appimagetool /usr/local/bin/

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Install Qt for AMD64
        if: matrix.arch == 'amd64'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          modules: qtmultimedia qtserialport

      - name: Install Qt for ARM64
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-multimedia-dev libqt6svg6-dev libqt6serialport6-dev libgl1-mesa-dev qt6-l10n-tools qt6-tools-dev qt6-tools-dev-tools
          echo "Qt6_DIR=/usr/lib/aarch64-linux-gnu/cmake/Qt6" >> $GITHUB_ENV
          echo "QTDIR=/usr/lib/aarch64-linux-gnu/qt6" >> $GITHUB_ENV
          echo "PATH=/usr/lib/qt6/bin:$PATH" >> $GITHUB_ENV

      - name: Debug Qt environment
        run: |
          echo "PATH: $PATH"
          echo "Qt6_DIR: $Qt6_DIR"
          echo "QTDIR: $QTDIR"
          which lupdate || echo "lupdate not found"
          lupdate --version || echo "lupdate version check failed"

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create build directory
        run: |
          buildDir="${{ runner.temp }}/build"
          mkdir -p $buildDir
          echo "BUILD_DIR=$buildDir" >> $GITHUB_ENV

      - name: Update translations
        working-directory: ${{ github.workspace }}
        run: |
          lupdate openterfaceQT.pro -no-obsolete

      - name: Release translations
        working-directory: ${{ github.workspace }}
        run: |
          lrelease openterfaceQT.pro
          mkdir -p ${{ env.BUILD_DIR }}/config/languages
          mkdir -p ${{ env.BUILD_DIR }}/config/keyboards
          cp config/keyboards/*.json ${{ env.BUILD_DIR }}/config/keyboards
          cp config/languages/*.qm ${{ env.BUILD_DIR }}/config/languages

      - name: Configure And Build
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          qmake6 ${{ github.workspace }} && make -j$(nproc)
          echo "Checking build output:"
          ls -lh ${{ env.BUILD_DIR }}
          if [ -f ${{ env.BUILD_DIR }}/openterfaceQT ]; then
            echo "openterfaceQT found!"
          else
            echo "Error: openterfaceQT not found in ${{ env.BUILD_DIR }}!"
            exit 1
          fi

      - name: Create deb package
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p package/DEBIAN
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.${{ matrix.arch }}"
          
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/${{ matrix.arch }}/g" \
              ${{ github.workspace }}/packaging/debian/control > package/DEBIAN/control
          
          mkdir -p package/usr/bin
          cp -r ${{ env.BUILD_DIR }}/openterfaceQT package/usr/bin

          mkdir -p package/usr/share/icons/hicolor/256x256/apps/
          cp ${{ github.workspace }}/images/icon_256.png package/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png

          mkdir -p package/usr/share/applications/
          cat > package/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF

          mv package $PKG_NAME
          dpkg-deb --build $PKG_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.${{ matrix.arch }}.deb
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.${{ matrix.arch }}.deb
          if-no-files-found: error

      - name: Create rpm package
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p rpmbuild/{SPECS,SOURCES,BUILD,RPMS,SRPMS}
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.${{ matrix.arch }}"
          
          # Copy build output and icon to SOURCES
          cp ${{ env.BUILD_DIR }}/openterfaceQT rpmbuild/SOURCES/ || { echo "Failed to copy openterfaceQT!"; exit 1; }
          cp ${{ github.workspace }}/images/icon_256.png rpmbuild/SOURCES/ || { echo "Failed to copy icon_256.png!"; exit 1; }
          
          # Debug: Verify files in SOURCES
          ls -lh rpmbuild/SOURCES/
          
          # Generate spec file with version and architecture substitutions
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/${{ matrix.arch }}/g" \
              ${{ github.workspace }}/packaging/rpm/spec > rpmbuild/SPECS/openterfaceqt.spec
          
          # Debug: Show generated spec file
          cat rpmbuild/SPECS/openterfaceqt.spec
          
          # Build RPM
          rpmbuild --define "_topdir ${{ runner.temp }}/rpmbuild" -bb rpmbuild/SPECS/openterfaceqt.spec
          
          # Copy the resulting RPM
          find rpmbuild/RPMS -name "*.rpm" -exec cp {} ./$PKG_NAME.rpm \;

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.${{ matrix.arch }}.rpm
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.${{ matrix.arch }}.rpm

          if-no-files-found: error