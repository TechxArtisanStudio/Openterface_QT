name: Linux Build

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

env:
  ARTIFACT: openterfaceQT
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.6.3
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/openterface-qt

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        arch: [amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Dynamic Qt Docker Image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dynamic:latest

      - name: Install packaging tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rpm

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Read version from version.h
        id: read_version
        run: |
          VERSION=$(grep -oP '#define APP_VERSION "\K[^"]+' resources/version.h)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build in Docker Container
        run: |
          # Create build directory in host for artifact collection
          mkdir -p ${{ runner.temp }}/build
          mkdir -p ${{ runner.temp }}/build/config/languages
          mkdir -p ${{ runner.temp }}/build/config/keyboards
          
          # Build application using Dynamic Qt Docker environment
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -v ${{ runner.temp }}/build:/workspace/build \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-dynamic:latest \
            bash -c "
              echo 'Building Openterface QT Application (Dynamic Qt)...'
              
              # Update translations
              lupdate openterfaceQT.pro -no-obsolete || echo 'lupdate failed, continuing...'
              
              # Release translations
              lrelease openterfaceQT.pro || echo 'lrelease failed, continuing...'
              
              # Copy configuration files
              cp -r config/keyboards/*.json /workspace/build/config/keyboards/ 2>/dev/null || echo 'No keyboard configs found'
              cp -r config/languages/*.qm /workspace/build/config/languages/ 2>/dev/null || echo 'No language files found'
              
              # Configure and build with qmake
              cd /workspace/build
              qmake6 /workspace/src && make -j\$(nproc)
              
              # Verify build output
              echo 'Checking build output:'
              ls -lh /workspace/build
              if [ -f '/workspace/build/openterfaceQT' ]; then
                echo 'openterfaceQT found!'
              else
                echo 'Error: openterfaceQT not found!'
                exit 1
              fi
            "
          
          echo "BUILD_DIR=${{ runner.temp }}/build" >> $GITHUB_ENV

      - name: Create deb package
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p package/DEBIAN
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.${{ matrix.arch }}"
          
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/${{ matrix.arch }}/g" \
              ${{ github.workspace }}/packaging/debian/control > package/DEBIAN/control
          
          mkdir -p package/usr/bin
          cp -r ${{ env.BUILD_DIR }}/openterfaceQT package/usr/bin

          mkdir -p package/usr/share/icons/hicolor/256x256/apps/
          cp ${{ github.workspace }}/images/icon_256.png package/usr/share/icons/hicolor/256x256/apps/openterfaceQT.png

          mkdir -p package/usr/share/applications/
          cat > package/usr/share/applications/openterfaceQT.desktop << EOF
          [Desktop Entry]
          Version=1.0
          Type=Application
          Name=OpenterfaceQT
          Exec=/usr/bin/openterfaceQT
          Icon=openterfaceQT
          Comment=OpenterfaceQT Application
          Categories=Utility;
          EOF

          mv package $PKG_NAME
          dpkg-deb --build $PKG_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.${{ matrix.arch }}.deb
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.${{ matrix.arch }}.deb
          if-no-files-found: error

      - name: Create rpm package
        working-directory: ${{ runner.temp }}
        run: |
          mkdir -p rpmbuild/{SPECS,SOURCES,BUILD,RPMS,SRPMS}
          
          PKG_NAME="${{ env.ARTIFACT }}.linux.${{ matrix.arch }}"
          
          # Copy build output and icon to SOURCES
          cp ${{ env.BUILD_DIR }}/openterfaceQT rpmbuild/SOURCES/ || { echo "Failed to copy openterfaceQT!"; exit 1; }
          cp ${{ github.workspace }}/images/icon_256.png rpmbuild/SOURCES/ || { echo "Failed to copy icon_256.png!"; exit 1; }
          
          # Debug: Verify files in SOURCES
          ls -lh rpmbuild/SOURCES/
          
          # Generate spec file with version and architecture substitutions
          sed -e "s/\${VERSION}/${{ env.VERSION }}/g" \
              -e "s/\${ARCH}/${{ matrix.arch }}/g" \
              ${{ github.workspace }}/packaging/rpm/spec > rpmbuild/SPECS/openterfaceqt.spec
          
          # Debug: Show generated spec file
          cat rpmbuild/SPECS/openterfaceqt.spec
          
          # Build RPM
          rpmbuild --define "_topdir ${{ runner.temp }}/rpmbuild" -bb rpmbuild/SPECS/openterfaceqt.spec
          
          # Copy the resulting RPM
          find rpmbuild/RPMS -name "*.rpm" -exec cp {} ./$PKG_NAME.rpm \;

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.linux.${{ matrix.arch }}.rpm
          path: ${{ runner.temp }}/${{ env.ARTIFACT }}.linux.${{ matrix.arch }}.rpm

          if-no-files-found: error