name: Build Qt Environments (Static & Shared)

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Type of environment to build'
        required: true
        default: 'both'
        type: choice
        options:
        - 'static'
        - 'shared'  
        - 'both'
      step:
        description: 'Which step to build (for static environment)'
        required: false
        default: 'all'
        type: choice
        options:
        - 'base'
        - 'ffmpeg'
        - 'gstreamer'
        - 'qt-base-qtml'
        - 'qt-declarative'
        - 'qt-complete'
        - 'all'
      ubuntu_version:
        description: 'Ubuntu base image version'
        required: false
        default: '24.04'
        type: choice
        options:
        - '22.04'
        - '24.04'
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-qt-environments.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-qt-environments.yml'

env:
  REGISTRY: ghcr.io

jobs:
  # Shared Qt Environment Build
  build-shared:
    if: ${{ github.event.inputs.environment_type == 'shared' || github.event.inputs.environment_type == 'both' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      shared-digest: ${{ steps.build-shared.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for shared
        id: meta-shared
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Check if shared image exists
        id: check-shared
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build shared image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64"
            echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG"
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:$IMAGE_TAG > /dev/null 2>&1; then
              echo "Shared image already exists for amd64 architecture, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "shared image does not exist for amd64 architecture, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Shared Qt image
        id: build-shared
        if: steps.check-shared.outputs.should_build == 'true' || github.event_name == 'push' || github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-shared
          build-args: |
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta-shared.outputs.tags }}
          labels: ${{ steps.meta-shared.outputs.labels }}
          cache-from: type=gha,scope=shared
          cache-to: type=gha,mode=max,scope=shared
          platforms: linux/amd64

      - name: Test Shared Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64 \
            /opt/verify/verify-qt-shared.sh

  # Static Qt Environment Build (existing multi-stage process)
  build-static-base:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'base' || github.event.inputs.step == 'qt-base-qtml' || github.event.inputs.step == 'qt-declarative' || github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Check if base image exists
        id: check-base
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build base image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64"
            echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:$IMAGE_TAG"
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:$IMAGE_TAG > /dev/null 2>&1; then
              echo "Base image already exists for architecture amd64, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "Base image does not exist for architecture amd64, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Base image
        id: build
        if: steps.check-base.outputs.should_build == 'true' || github.event_name == 'push' || github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-base
          build-args: |
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-base
          cache-to: type=gha,mode=max,scope=static-base
          platforms: linux/amd64

  build-static-ffmpeg:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'ffmpeg' || github.event.inputs.step == 'qt-base-qtml' || github.event.inputs.step == 'qt-declarative' || github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-base]
    permissions:
      contents: read
      packages: write
    outputs:
      ffmpeg-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-ffmpeg
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Build and push FFmpeg image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-ffmpeg
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-ffmpeg
          cache-to: type=gha,mode=max,scope=static-ffmpeg
          platforms: linux/amd64

  build-static-gstreamer:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'gstreamer' || github.event.inputs.step == 'qt-base-qtml' || github.event.inputs.step == 'qt-declarative' || github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-ffmpeg]
    permissions:
      contents: read
      packages: write
    outputs:
      gstreamer-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-gstreamer
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Build and push GStreamer image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-gstreamer
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-ffmpeg:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-gstreamer
          cache-to: type=gha,mode=max,scope=static-gstreamer
          platforms: linux/amd64

  build-static-qt-base-qtml:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'qt-base-qtml' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-gstreamer]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-base-qtml-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-qt-base-qtml
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Build and push Qt Base QTML image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-base-qtml
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-gstreamer:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-qt-base-qtml
          cache-to: type=gha,mode=max,scope=static-qt-base-qtml
          platforms: linux/amd64

  build-static-qt-declarative:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'qt-declarative' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-qt-base-qtml]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-declarative-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-qt-declarative
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Build and push Qt Declarative image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-declarative
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-qt-base-qtml:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-qt-declarative
          cache-to: type=gha,mode=max,scope=static-qt-declarative
          platforms: linux/amd64

  build-static-complete:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-qt-declarative]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=sha,suffix=-amd64
            type=raw,value=latest-amd64
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64

      - name: Build and push Qt Complete image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-complete
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-qt-declarative:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-complete
          cache-to: type=gha,mode=max,scope=static-complete
          platforms: linux/amd64

      - name: Test Static Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64 \
            /opt/Qt6/bin/verify-qt-installation.sh

  # Summary job that shows which images are available
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-shared, build-static-complete]
    if: always()
    steps:
      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qtbuild' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build Summary
        run: |
          echo "## Qt Build Environment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-shared.result }}" = "success" ]; then
            echo "| Shared Qt | ✅ Success | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-shared:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Shared Qt | ❌ Failed/Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-static-complete.result }}" = "success" ]; then
            echo "| Static Qt Complete | ✅ Success | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Static Qt Complete | ❌ Failed/Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Shared Build:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/workspace/src -w /workspace/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64 \\" >> $GITHUB_STEP_SUMMARY
          echo "  bash -c 'mkdir build && cd build && cmake -DBUILD_SHARED_LIBS=ON .. && make -j\$(nproc)'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Static Build:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/workspace/src -w /workspace/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}-amd64 \\" >> $GITHUB_STEP_SUMMARY
          echo "  bash -c 'mkdir build && cd build && cmake -DCMAKE_PREFIX_PATH=/opt/Qt6 -DBUILD_SHARED_LIBS=OFF .. && make -j\$(nproc)'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
