name: Build Qt Environments (Static & Dynamic)

on:
  workflow_dispatch:
    inputs:
      environment_type:
        description: 'Type of environment to build'
        required: true
        default: 'both'
        type: choice
        options:
        - 'static'
        - 'dynamic'  
        - 'both'
      step:
        description: 'Which step to build (for static environment)'
        required: false
        default: 'all'
        type: choice
        options:
        - 'base'
        - 'ffmpeg'
        - 'gstreamer'
        - 'qt-complete'
        - 'all'
      architecture:
        description: 'Target architecture(s) to build'
        required: false
        default: 'linux/amd64'
        type: choice
        options:
        - 'linux/amd64'
        - 'linux/arm64'
        - 'linux/amd64,linux/arm64'
      ubuntu_version:
        description: 'Ubuntu base image version'
        required: false
        default: '24.04'
        type: choice
        options:
        - '22.04'
        - '24.04'
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-qt-environments.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - '.github/workflows/build-qt-environments.yml'

env:
  REGISTRY: ghcr.io

jobs:
  # Dynamic Qt Environment Build
  build-dynamic:
    if: ${{ github.event.inputs.environment_type == 'dynamic' || github.event.inputs.environment_type == 'both' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      dynamic-digest: ${{ steps.build-dynamic.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          ARCH_INPUT="${{ github.event.inputs.architecture || 'linux/amd64' }}"
          if [[ "$ARCH_INPUT" == "linux/amd64" ]]; then
            echo "arch_suffix=amd64" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "$ARCH_INPUT" == "linux/arm64" ]]; then
            echo "arch_suffix=arm64" >> $GITHUB_OUTPUT  
            echo "arch_tag_suffix=-arm64" >> $GITHUB_OUTPUT
          else
            # Multi-arch build, no suffix for multi-arch manifest
            echo "arch_suffix=multi" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for dynamic
        id: meta-dynamic
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic
          tags: |
            type=ref,event=branch,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=ref,event=pr,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=sha,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=latest${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}

      - name: Check if dynamic image exists
        id: check-dynamic
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build dynamic image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}"
            echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:$IMAGE_TAG"
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:$IMAGE_TAG > /dev/null 2>&1; then
              echo "Dynamic image already exists for architecture ${{ steps.arch-suffix.outputs.arch_suffix }}, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "Dynamic image does not exist for architecture ${{ steps.arch-suffix.outputs.arch_suffix }}, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Dynamic Qt image
        id: build-dynamic
        if: steps.check-dynamic.outputs.should_build == 'true' || github.event_name == 'push' || github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-dynamic
          build-args: |
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=${{ steps.arch-suffix.outputs.arch_suffix }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta-dynamic.outputs.tags }}
          labels: ${{ steps.meta-dynamic.outputs.labels }}
          cache-from: type=gha,scope=dynamic
          cache-to: type=gha,mode=max,scope=dynamic
          platforms: ${{ github.event.inputs.architecture || 'linux/amd64' }}

      - name: Test Dynamic Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:latest \
            /opt/verify/verify-qt-dynamic.sh

  # Static Qt Environment Build (existing multi-stage process)
  build-static-base:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'base' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          ARCH_INPUT="${{ github.event.inputs.architecture || 'linux/amd64' }}"
          if [[ "$ARCH_INPUT" == "linux/amd64" ]]; then
            echo "arch_suffix=amd64" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "$ARCH_INPUT" == "linux/arm64" ]]; then
            echo "arch_suffix=arm64" >> $GITHUB_OUTPUT  
            echo "arch_tag_suffix=-arm64" >> $GITHUB_OUTPUT
          else
            # Multi-arch build, no suffix for multi-arch manifest
            echo "arch_suffix=multi" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base
          tags: |
            type=ref,event=branch,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=ref,event=pr,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=sha,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=latest${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}

      - name: Check if base image exists
        id: check-base
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build base image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            IMAGE_TAG="ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}"
            echo "Checking for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:$IMAGE_TAG"
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:$IMAGE_TAG > /dev/null 2>&1; then
              echo "Base image already exists for architecture ${{ steps.arch-suffix.outputs.arch_suffix }}, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "Base image does not exist for architecture ${{ steps.arch-suffix.outputs.arch_suffix }}, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Base image
        id: build
        if: steps.check-base.outputs.should_build == 'true' || github.event_name == 'push' || github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-base
          build-args: |
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=${{ steps.arch-suffix.outputs.arch_suffix }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-base
          cache-to: type=gha,mode=max,scope=static-base
          platforms: ${{ github.event.inputs.architecture || 'linux/amd64' }}

  build-static-ffmpeg:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'ffmpeg' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-base]
    permissions:
      contents: read
      packages: write
    outputs:
      ffmpeg-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          ARCH_INPUT="${{ github.event.inputs.architecture || 'linux/amd64' }}"
          if [[ "$ARCH_INPUT" == "linux/amd64" ]]; then
            echo "arch_suffix=amd64" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "$ARCH_INPUT" == "linux/arm64" ]]; then
            echo "arch_suffix=arm64" >> $GITHUB_OUTPUT  
            echo "arch_tag_suffix=-arm64" >> $GITHUB_OUTPUT
          else
            # Multi-arch build, no suffix for multi-arch manifest
            echo "arch_suffix=multi" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-ffmpeg
          tags: |
            type=ref,event=branch,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=ref,event=pr,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=sha,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=latest${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}

      - name: Build and push FFmpeg image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-ffmpeg
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-base:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=${{ steps.arch-suffix.outputs.arch_suffix }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-ffmpeg
          cache-to: type=gha,mode=max,scope=static-ffmpeg
          platforms: ${{ github.event.inputs.architecture || 'linux/amd64' }}

  build-static-gstreamer:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'gstreamer' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-ffmpeg]
    permissions:
      contents: read
      packages: write
    outputs:
      gstreamer-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          ARCH_INPUT="${{ github.event.inputs.architecture || 'linux/amd64' }}"
          if [[ "$ARCH_INPUT" == "linux/amd64" ]]; then
            echo "arch_suffix=amd64" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "$ARCH_INPUT" == "linux/arm64" ]]; then
            echo "arch_suffix=arm64" >> $GITHUB_OUTPUT  
            echo "arch_tag_suffix=-arm64" >> $GITHUB_OUTPUT
          else
            # Multi-arch build, no suffix for multi-arch manifest
            echo "arch_suffix=multi" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-gstreamer
          tags: |
            type=ref,event=branch,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=ref,event=pr,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=sha,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=latest${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}

      - name: Build and push GStreamer image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-gstreamer
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-ffmpeg:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=${{ steps.arch-suffix.outputs.arch_suffix }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-gstreamer
          cache-to: type=gha,mode=max,scope=static-gstreamer
          platforms: ${{ github.event.inputs.architecture || 'linux/amd64' }}

  build-static-complete:
    if: ${{ github.event.inputs.environment_type == 'static' || github.event.inputs.environment_type == 'both' || (github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all') }}
    runs-on: ubuntu-latest
    needs: [build-static-gstreamer]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set architecture suffix
        id: arch-suffix
        run: |
          ARCH_INPUT="${{ github.event.inputs.architecture || 'linux/amd64' }}"
          if [[ "$ARCH_INPUT" == "linux/amd64" ]]; then
            echo "arch_suffix=amd64" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=-amd64" >> $GITHUB_OUTPUT
          elif [[ "$ARCH_INPUT" == "linux/arm64" ]]; then
            echo "arch_suffix=arm64" >> $GITHUB_OUTPUT  
            echo "arch_tag_suffix=-arm64" >> $GITHUB_OUTPUT
          else
            # Multi-arch build, no suffix for multi-arch manifest
            echo "arch_suffix=multi" >> $GITHUB_OUTPUT
            echo "arch_tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete
          tags: |
            type=ref,event=branch,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=ref,event=pr,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=sha,suffix=${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=latest${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            type=raw,value=ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}

      - name: Build and push Qt Complete image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-complete
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-gstreamer:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }}
            UBUNTU_VERSION=${{ github.event.inputs.ubuntu_version || '24.04' }}
            TARGETARCH=${{ steps.arch-suffix.outputs.arch_suffix }}
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=static-complete
          cache-to: type=gha,mode=max,scope=static-complete
          platforms: ${{ github.event.inputs.architecture || 'linux/amd64' }}

      - name: Test Static Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:ubuntu-${{ github.event.inputs.ubuntu_version || '24.04' }}${{ steps.arch-suffix.outputs.arch_tag_suffix }} \
            /opt/Qt6/bin/verify-qt-installation.sh

  # Build applications with both environments to verify they work
  test-both-environments:
    if: ${{ github.event.inputs.environment_type == 'both' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build-dynamic, build-static-complete]
    strategy:
      matrix:
        build_type: [static, dynamic]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Test ${{ matrix.build_type }} build
        run: |
          if [ "${{ matrix.build_type }}" = "static" ]; then
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest"
            CMAKE_ARGS="-DCMAKE_PREFIX_PATH=/opt/Qt6 -DBUILD_SHARED_LIBS=OFF"
            BUILD_TYPE="Static"
          else
            IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:latest"
            CMAKE_ARGS="-DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/cmake/Qt6 -DBUILD_SHARED_LIBS=ON"
            BUILD_TYPE="Dynamic"
          fi
          
          echo "Testing $BUILD_TYPE Qt Build Environment..."
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -w /workspace/src \
            $IMAGE \
            bash -c "
              echo 'Building Openterface QT Application ($BUILD_TYPE)...'
              mkdir -p build-${{ matrix.build_type }} && cd build-${{ matrix.build_type }}
              
              # Configure with CMake
              cmake $CMAKE_ARGS \\
                    -DCMAKE_BUILD_TYPE=Release \\
                    .. || { echo 'CMake configuration failed'; exit 1; }
              
              # Build the application
              make -j\$(nproc) || { echo 'Build failed'; exit 1; }
              
              echo '$BUILD_TYPE build completed successfully!'
              ls -la
              
              # Check binary dependencies
              if [ -f './openterfaceQT' ]; then
                echo 'Checking binary dependencies:'
                ldd ./openterfaceQT | head -20
              fi
            "

      - name: Upload ${{ matrix.build_type }} build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openterface-qt-${{ matrix.build_type }}-build
          path: |
            build-${{ matrix.build_type }}/
            !build-${{ matrix.build_type }}/CMakeFiles/
            !build-${{ matrix.build_type }}/**/*.o
          retention-days: 7

  # Summary job that shows which images are available
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-dynamic, build-static-complete]
    if: always()
    steps:
      - name: Set lowercase image name
        run: echo "IMAGE_NAME_LOWER=$(echo '${{ github.repository_owner }}/openterface-qt' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Build Summary
        run: |
          echo "## Qt Build Environment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-dynamic.result }}" = "success" ]; then
            echo "| Dynamic Qt | ✅ Success | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:latest\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Dynamic Qt | ❌ Failed/Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-static-complete.result }}" = "success" ]; then
            echo "| Static Qt Complete | ✅ Success | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Static Qt Complete | ❌ Failed/Skipped | - |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Dynamic Build:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/workspace/src -w /workspace/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-dynamic:latest \\" >> $GITHUB_STEP_SUMMARY
          echo "  bash -c 'mkdir build && cd build && cmake -DBUILD_SHARED_LIBS=ON .. && make -j\$(nproc)'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Static Build:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -v \$(pwd):/workspace/src -w /workspace/src \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}-complete:latest \\" >> $GITHUB_STEP_SUMMARY
          echo "  bash -c 'mkdir build && cd build && cmake -DCMAKE_PREFIX_PATH=/opt/Qt6 -DBUILD_SHARED_LIBS=OFF .. && make -j\$(nproc)'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
