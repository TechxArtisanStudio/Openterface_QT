name: Build Qt Environment (Step by Step)

on:
  workflow_dispatch:
    inputs:
      step:
        description: 'Which step to build'
        required: true
        default: 'all'
        type: choice
        options:
        - 'base'
        - 'ffmpeg'
        - 'gstreamer'
        - 'qt-complete'
        - 'all'
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/openterface-qt

jobs:
  build-base:
    if: ${{ github.event.inputs.step == 'base' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Build and push Base image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-base
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-ffmpeg:
    if: ${{ github.event.inputs.step == 'ffmpeg' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-base]
    permissions:
      contents: read
      packages: write
    outputs:
      ffmpeg-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ffmpeg
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Build and push FFmpeg image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-ffmpeg
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-gstreamer:
    if: ${{ github.event.inputs.step == 'gstreamer' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-ffmpeg]
    permissions:
      contents: read
      packages: write
    outputs:
      gstreamer-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gstreamer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Build and push GStreamer image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-gstreamer
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ffmpeg:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-qt-complete:
    if: ${{ github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-gstreamer]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Build and push Qt Complete image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-complete
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gstreamer:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-environment:
    if: ${{ github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-qt-complete]
    steps:
      - name: Test Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            /opt/Qt6/bin/verify-qt-installation.sh

      - name: Test Qt Build Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            bash -c "
              echo 'Testing Qt build environment...'
              qmake --version
              which qmake
              pkg-config --exists Qt6Core && echo 'Qt6Core pkg-config: OK' || echo 'Qt6Core pkg-config: FAILED'
              pkg-config --exists Qt6Multimedia && echo 'Qt6Multimedia pkg-config: OK' || echo 'Qt6Multimedia pkg-config: FAILED'
              echo 'Environment test completed.'
            "

  build-application:
    if: ${{ github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-qt-complete]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Openterface QT Application
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace/src \
            -w /workspace/src \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            bash -c "
              echo 'Building Openterface QT Application...'
              mkdir -p build && cd build
              
              # Set environment variables
              export PKG_CONFIG_PATH=\"/opt/Qt6/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:\$PKG_CONFIG_PATH\"
              export CMAKE_PREFIX_PATH=\"/opt/Qt6:\$CMAKE_PREFIX_PATH\"
              
              # Configure with CMake
              cmake -DCMAKE_PREFIX_PATH=\"/opt/Qt6\" \\
                    -DCMAKE_BUILD_TYPE=Release \\
                    -DBUILD_SHARED_LIBS=OFF \\
                    -DQt6_DIR=\"/opt/Qt6/lib/cmake/Qt6\" \\
                    -DQt6Multimedia_DIR=\"/opt/Qt6/lib/cmake/Qt6Multimedia\" \\
                    -DQt6MultimediaWidgets_DIR=\"/opt/Qt6/lib/cmake/Qt6MultimediaWidgets\" \\
                    -DQt6SerialPort_DIR=\"/opt/Qt6/lib/cmake/Qt6SerialPort\" \\
                    -DQt6Svg_DIR=\"/opt/Qt6/lib/cmake/Qt6Svg\" \\
                    .. || { echo 'CMake configuration failed'; exit 1; }
              
              # Build the application
              make -j\$(nproc) || { echo 'Build failed'; exit 1; }
              
              echo 'Build completed successfully!'
              ls -la
            "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openterface-qt-static-build
          path: |
            build/
            !build/CMakeFiles/
            !build/**/*.o
            !build/**/*.so
          retention-days: 7
