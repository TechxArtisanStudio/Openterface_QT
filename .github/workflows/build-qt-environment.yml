name: Build Qt Environment (Step by Step)

on:
  workflow_dispatch:
    inputs:
      step:
        description: 'Which step to build'
        required: true
        default: 'all'
        type: choice
        options:
        - 'base'
        - 'ffmpeg'
        - 'gstreamer'
        - 'qt-complete'
        - 'all'
      force_rebuild:
        description: 'Force rebuild even if image exists'
        required: false
        default: false
        type: boolean
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/openterface-qt

jobs:
  build-base:
    if: ${{ github.event.inputs.step == 'base' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Check if base image exists
        id: check-base
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build base image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest > /dev/null 2>&1; then
              echo "Base image already exists, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "Base image does not exist, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Base image
        id: build
        if: steps.check-base.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-base
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test Base image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest bash -c "
            echo 'Testing base image components...'
            cmake --version
            ninja --version
            pkg-config --version
            gcc --version
            echo 'Base image test completed!'
          "

  build-ffmpeg:
    if: ${{ github.event.inputs.step == 'ffmpeg' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-base]
    permissions:
      contents: read
      packages: write
    outputs:
      ffmpeg-digest: ${{ steps.build.outputs.digest }}
      base-rebuilt: ${{ needs.build-base.outputs.base-digest != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ffmpeg
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Check if FFmpeg image exists
        id: check-ffmpeg
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build FFmpeg image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-base.outputs.base-digest }}" != "" ]]; then
            echo "Base image was rebuilt, need to rebuild FFmpeg image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ffmpeg:latest > /dev/null 2>&1; then
              echo "FFmpeg image already exists, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "FFmpeg image does not exist, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push FFmpeg image
        id: build
        if: steps.check-ffmpeg.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-ffmpeg
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-gstreamer:
    if: ${{ github.event.inputs.step == 'gstreamer' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-ffmpeg]
    permissions:
      contents: read
      packages: write
    outputs:
      gstreamer-digest: ${{ steps.build.outputs.digest }}
      ffmpeg-rebuilt: ${{ needs.build-ffmpeg.outputs.ffmpeg-digest != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gstreamer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Check if GStreamer image exists
        id: check-gstreamer
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build GStreamer image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-ffmpeg.outputs.ffmpeg-digest }}" != "" ]]; then
            echo "FFmpeg image was rebuilt, need to rebuild GStreamer image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gstreamer:latest > /dev/null 2>&1; then
              echo "GStreamer image already exists, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "GStreamer image does not exist, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push GStreamer image
        id: build
        if: steps.check-gstreamer.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-gstreamer
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ffmpeg:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  build-qt-complete:
    if: ${{ github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-gstreamer]
    permissions:
      contents: read
      packages: write
    outputs:
      qt-digest: ${{ steps.build.outputs.digest }}
      gstreamer-rebuilt: ${{ needs.build-gstreamer.outputs.gstreamer-digest != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest

      - name: Check if Qt Complete image exists
        id: check-qt-complete
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "Force rebuild requested, will build Qt Complete image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-gstreamer.outputs.gstreamer-digest }}" != "" ]]; then
            echo "GStreamer image was rebuilt, need to rebuild Qt Complete image"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest > /dev/null 2>&1; then
              echo "Qt Complete image already exists, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            else
              echo "Qt Complete image does not exist, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build and push Qt Complete image
        id: build
        if: steps.check-qt-complete.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.qt-complete
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-gstreamer:latest
          push: ${{ github.event.inputs.push_to_registry == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-environment:
    if: ${{ github.event.inputs.step == 'qt-complete' || github.event.inputs.step == 'all' }}
    runs-on: ubuntu-latest
    needs: [build-qt-complete]
    steps:
      - name: Test Qt Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            /opt/Qt6/bin/verify-qt-installation.sh

      - name: Test Qt Build Environment
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-complete:latest \
            bash -c "
              echo 'Testing Qt build environment...'
              qmake --version
              which qmake
              pkg-config --exists Qt6Core && echo 'Qt6Core pkg-config: OK' || echo 'Qt6Core pkg-config: FAILED'
              pkg-config --exists Qt6Multimedia && echo 'Qt6Multimedia pkg-config: OK' || echo 'Qt6Multimedia pkg-config: FAILED'
              echo 'Environment test completed.'
            "
