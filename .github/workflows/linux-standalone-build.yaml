---
name: Standalone Build for linux


on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  ARTIFACT: openterfaceQT-standalone
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.3 
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Qt Build
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: /opt/Qt6
          key: qt-6.5.3-linux-static
          restore-keys: |
            qt-6.5.3-linux-static

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
            path: ${{ env.SOURCE_DIR }}/qt-build/
            key: dependencies-cache
            restore-keys: |
              dependencies-cache
              
      - name: Cache FFmpeg
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
            path: ${{ env.SOURCE_DIR }}/ffmpeg-build/
            key: ffmpeg-cache
            restore-keys: |
              ffmpeg-cache

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build Qt Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-dependency.sh

      - name: Qt Dependencies Already Built
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "Qt dependencies already built"
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-dependency.sh --no-build
      
      - name: Build FFmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-ffmpeg.sh

      - name: FFmpeg Already Built
        if: steps.cache-ffmpeg.outputs.cache-hit == 'true'
        run: |
          echo "FFmpeg already built"
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-ffmpeg.sh --no-build
          
      - name: Build Qt Statically
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-from-source.sh

      - name: Create build directory
        run: |
          mkdir ${{ runner.temp }}/build

      - name: Prepare Driver Files
        run: |
          mkdir ${{ env.SOURCE_DIR }}/drivers
          cp driver/linux/* ${{ env.SOURCE_DIR }}/drivers/
      
      - name: Install Dependency Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgles2-mesa-dev \
            libegl1-mesa-dev \
            libglib2.0-dev \
            libpcre2-dev \
            libxrandr2 \
            libxcb1-dev \
            '^libxcb.*-dev' \
            libxcb-glx0-dev \
            libx11-xcb-dev \
            libglu1-mesa-dev \
            libxrender-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libx11-dev \
            libdbus-1-dev \
            libdbus-glib-1-dev \
            libpulse-dev \
            libsndfile1-dev \
            libxrandr-dev \
            libxrender-dev

      - name: Build Standalone Executable
        working-directory: ${{ runner.temp }}/build
        run: |
          echo "Setting LD_LIBRARY_PATH..."
          export LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH

          # Create a patch file to modify CMake linking behavior
          cat > remove_static_flag.patch << EOF
          --- CMakeLists.txt.orig
          +++ CMakeLists.txt
          @@ -1,1 +1,1 @@
          -set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} -static")
          +set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS}")
          EOF

          # Apply patch if needed (check if it contains -static flag)
          if grep -q "CMAKE_EXE_LINKER_FLAGS.*-static" "${{ env.SOURCE_DIR }}/CMakeLists.txt"; then
            patch "${{ env.SOURCE_DIR }}/CMakeLists.txt" < remove_static_flag.patch || echo "Patch may have failed, but continuing..."
          fi

          echo "Configuring with CMake..."
            cmake -S "${{ env.SOURCE_DIR }}" -B . \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_PREFIX_PATH="/opt/qt6-deps;/opt/Qt6" \
              -DCMAKE_INSTALL_PREFIX=release \
              -DCMAKE_VERBOSE_MAKEFILE=ON \
              -DQT_DEBUG_FIND_PACKAGE=ON \
              -DCMAKE_CXX_FLAGS="-Os -s" \
              -DCMAKE_C_FLAGS="-Os -s" \
              -DCMAKE_EXE_LINKER_FLAGS="-Wl,--no-as-needed" \
              -DLINK_LIBUSB_STATICALLY=ON \
              -DFREETYPE_INCLUDE_DIRS=/opt/qt6-deps/include/freetype2 \
              -DFREETYPE_LIBRARIES=/opt/qt6-deps/lib/libfreetype.a \
              -DFONTCONFIG_LIBRARIES=/opt/qt6-deps/lib/libfontconfig.a \
              -DEXPAT_LIBRARY_PATH=/opt/qt6-deps/lib/libexpat.a \
              -DLIBUSB_LIB=/usr/lib/libusb-1.0.a

          # Modify the build system to create a hook for link.txt
          cat > modify_link_command.sh << 'EOF'
          #!/bin/bash
          original_cmake_link_script="$1"
          if [ ! -f "$original_cmake_link_script" ]; then
            echo "Error: Link script not found: $original_cmake_link_script"
            exit 1
          fi
          
          # Create a backup
          cp "$original_cmake_link_script" "${original_cmake_link_script}.bak"
          
          # Remove the -static flag and add -Bdynamic for system libraries
          sed -i 's/-static//g' "$original_cmake_link_script"
          
          echo "Modified link script:"
          cat "$original_cmake_link_script"
          EOF
          
          chmod +x modify_link_command.sh
          
          # Modify the CMakeLists.txt to hook into the linking process
          cat > inject_hook.patch << 'EOF'
          --- CMakeLists.txt
          +++ CMakeLists.txt
          @@ -100,0 +101,6 @@
          +# Custom command to modify link.txt before linking
          +add_custom_command(
          +  TARGET openterfaceQT
          +  PRE_LINK
          +  COMMAND ${CMAKE_CURRENT_BINARY_DIR}/modify_link_command.sh ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/openterfaceQT.dir/link.txt
          +)
          EOF
          
          # Apply the patch - ignoring failures as the line numbers may vary
          patch "${{ env.SOURCE_DIR }}/CMakeLists.txt" < inject_hook.patch || echo "Patch application might have partially failed, continuing anyway"
          
          # Copy the script to the build directory
          cp modify_link_command.sh ${CMAKE_CURRENT_BINARY_DIR}/modify_link_command.sh 2>/dev/null || cp modify_link_command.sh ./modify_link_command.sh

          echo "Building with CMake..."
          cmake --build . --verbose || (
            echo "First build attempt failed, trying with direct modification of link.txt"
            if [ -f CMakeFiles/openterfaceQT.dir/link.txt ]; then
              echo "Found link.txt, modifying it directly"
              sed -i 's/-static//g' CMakeFiles/openterfaceQT.dir/link.txt
              echo "Modified link.txt:"
              cat CMakeFiles/openterfaceQT.dir/link.txt
              cmake --build . --verbose || echo "CMake build failed even after modifying link.txt"
            else
              echo "CMake build failed and link.txt not found"
              exit 1
            fi
          )

          if [ ! -f openterfaceQT ]; then
            echo "Error: Failed to build openterfaceQT"
            exit 1
          fi

          echo "Check openterfaceQT dependencies..."
          ldd openterfaceQT

          echo "Creating standalone package..."
          mkdir package
          cp openterfaceQT package

      - name: Save build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}/build/package/openterfaceQT
          if-no-files-found: error

