name: Windows Build and Release

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        type: boolean
        default: false
      increase_version:
        description: 'Increase the patch version number'
        required: false
        type: boolean
        default: false
      increase_minor:
        description: 'Increase the minor version number'
        required: false
        type: boolean
        default: false
      increase_major:
        description: 'Increase the major version number'
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: cmd

env:
  ARTIFACT: "${{ vars.MY_APP_EXE_NAME }}"
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.3
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  QT_CACHE_KEY: qt-6.5.3-mingw-windows
  JOM_CACHE_KEY: jom-1.1.3-windows

jobs:
  build:
    runs-on: windows-2022
    permissions:
      contents: write
    environment: ${{ github.event.inputs.TARGET_ENV || 'Openterface_build' }}
    strategy:
      matrix:
        version: [offline, online]
    env:
      ARTIFACT: "${{ vars.MY_APP_EXE_NAME }}-${{ matrix.version }}"
      PACKAGE_DIR: "package_${{ matrix.version }}"
      EXE_NAME: "openterfaceQT_${{ matrix.version }}Version.exe"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/Qt
          key: ${{ env.QT_CACHE_KEY }}
          restore-keys: |
            ${{ env.QT_CACHE_KEY }}
            qt-6.5-mingw-windows


      - name: Update version
        run: |
          if [ "${{ github.event.inputs.increase_version }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-version
          elif [ "${{ github.event.inputs.increase_major }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-major
          elif [ "${{ github.event.inputs.increase_minor }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-minor
          else
            python "${{ env.SOURCE_DIR }}\update_version.py"
          fi
        shell: bash

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: Install Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: windows
          target: desktop
          arch: win64_mingw
          dir: ${{ runner.temp }}
          modules: qtmultimedia qtserialport
          setup-python: false

      - name: Download and Unzip Jom
        if: steps.cache-jom.outputs.cache-hit != 'true'
        working-directory: ${{ runner.temp }}
        run: |
          curl -L -o jom.zip "http://download.qt.io/official_releases/jom/jom.zip"
          7z x jom.zip -ojom

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64
      
      - name: Create build directory
        run: |
          $buildDir = ${{ runner.temp }}\build_${{ matrix.version }}"
          mkdir $buildDir


      - name: Build ${{ matrix.version }} version
        working-directory: $buildDir
        run: |
          echo "Building with qmake..."
          set PATH=${{ runner.temp }}\\Qt\\${{ env.QT_VERSION }}\\mingw_64\\bin;%PATH%

          if "${{ matrix.version }}" == "online" (
            set DEFINE_FLAG=DEFINES+=ONLINE_VERSION
          ) else (
            set DEFINE_FLAG=
          )

          qmake -v
          qmake -r ${{ env.SOURCE_DIR }}\openterfaceQT.pro %DEFINE_FLAG%
          if errorlevel 1 exit /b 1
          
          echo "Building with mingw32-make..."
          mingw32-make -j2
          if errorlevel 1 exit /b 1

          echo "\n release dir:"
          dir release
          echo "\n dir:"
          dir

          if not exist release\openterfaceQT.exe (
            echo "Error: Failed to build openterfaceQT.exe
            exit 1
          )
          
          echo "Creating package directory..."
          mkdir ${{ env.PACKAGE_DIR }}
          mkdir ${{ env.PACKAGE_DIR }}\driver
          mkdir ${{ env.PACKAGE_DIR }}\driver\windows

          copy release\openterfaceQT.exe ${{ env.PACKAGE_DIR }}\${{ env.EXE_NAME }}
          copy ${{ env.SOURCE_DIR }}\LICENSE ${{ env.PACKAGE_DIR }}
          copy ${{ env.SOURCE_DIR }}\driver\windows\* ${{ env.PACKAGE_DIR }}\driver\windows
          copy ${{ env.SOURCE_DIR }}\.github\workflows\capitalize-version.ps1 ${{ env.PACKAGE_DIR }}

          
          echo "Running windeployqt..."
          cd ${{ env.PACKAGE_DIR }}
          windeployqt --qmldir ${{ env.SOURCE_DIR }} ${{ env.EXE_NAME }} --compiler-runtime --multimedia

      - name: Move build artifacts
        run: move /Y $buildDir\${{ env.PACKAGE_DIR }} ${{ env.SOURCE_DIR }}
        shell: cmd

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: installer.iss
          options: 
            /O+ /DWorkingDir="${{ env.SOURCE_DIR }}\${{ env.PACKAGE_DIR }}" 
            /DMyAppVersion="${{ env.VERSION_FOR_INNO }}" 
            /DMyAppPublisher="${{ vars.MY_APP_PUBLISHER }}" 
            /DMyAppURL="${{ vars.MY_APP_URL }}" 
            /DOutputDir="${{ env.SOURCE_DIR }}\Output" 
            /DOutputBaseFileName=setup_${{ matrix.version }} 
            /DMyAppExeName=${{ env.EXE_NAME }}
            /DSourcePackage=${{ env.PACKAGE_DIR }}
      # Write-Output "::set-output name=capitalizedVersion::$capitalizedVersion"
      - name: Convert version to capitalized format using script
        id: convert_version
        run: |
          $version = "${{ matrix.version }}"
          $scriptPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "${{ env.PACKAGE_DIR }}\capitalize-version.ps1"
          Write-Output "Script path: $scriptPath"
          if (Test-Path $scriptPath) {
            $capitalizedVersion = & $scriptPath -version $version
            Write-Output "capitalizedVersion<<EOF" >> $env:GITHUB_OUTPUT
            Write-Output "$capitalizedVersion" >> $env:GITHUB_OUTPUT
            Write-Output "EOF" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Script not found at path: $scriptPath"
            exit 1
          }
        shell: pwsh

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: |
            ${{ env.SOURCE_DIR }}\Output\setup_${{ steps.convert_version.outputs.capitalizedVersion }}.exe
          if-no-files-found: error
        

      - name: Commit and push version update
        if: success() && (github.event.inputs.increase_version == 'true' || github.event.inputs.increase_major == 'true' || github.event.inputs.increase_minor == 'true') && matrix.version == 'online'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add resources/version.h
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" -a || echo "No changes to commit"
          git push https://${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

  release:
    needs: build
    if: github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        shell: bash
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        shell: bash
        run: |
          CHANGELOG=$(git log ${{ steps.get_latest_tag.outputs.LATEST_TAG }}..HEAD --pretty=format:"- %s")
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            Changes since last release:
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: setup_${{ steps.convert_version.outputs.capitalizedVersion }}.exe
          asset_name: setup_${{ steps.convert_version.outputs.capitalizedVersion }}.exe
          asset_content_type: application/octet-stream