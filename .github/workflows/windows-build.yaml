name: Windows Build and Release

on:
  push:
    branches: ["main", "dev"]
    tags: ["v*"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:
    inputs:
      increase_version:
        description: 'Increase the patch version number'
        required: false
        type: boolean
        default: false
      increase_minor:
        description: 'Increase the minor version number'
        required: false
        type: boolean
        default: false
      increase_major:
        description: 'Increase the major version number'
        required: false
        type: boolean
        default: false

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.3
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  QT_CACHE_KEY: qt-6.5.3-mingw-windows
  JOM_CACHE_KEY: jom-1.1.3-windows
  PACKAGE_DIR: "package_online"
  EXE_NAME: "openterfaceQT.exe"

jobs:
  build:
    runs-on: windows-2022
    permissions:
      contents: write
      actions: write
    environment: ${{ github.event.inputs.TARGET_ENV || 'Openterface_build' }}
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

            
      - name: Cache Qt Build
        id: cache-qt
        uses: actions/cache@v3
        with:
            path: C:\Qt6
            key: qt-6.5.3-mingw-windows-static
            restore-keys: |
              qt-6.5.3-mingw-windows-static

      - name: Cache MinGW and Ninja Build
        id: cache-mingw
        uses: actions/cache@v3
        with:
          path: |
            C:\mingw64
            C:\ProgramData\chocolatey\lib\ninja
          key: mingw-ninja-windows-static
          restore-keys: |
            mingw-ninja-windows-static
            
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Build environment
        if: steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          echo "Installing Ninja"
          choco install ninja -y
    
          echo "Downloading pre-compiled static build of MinGW-w64"
          curl -L -o mingw-w64.zip https://sourceforge.net/projects/mingw-w64/files/latest/download
          mkdir C:\mingw-w64
          tar -xf mingw-w64.zip -C C:\mingw64 --strip-components=1
    
          echo "Setting up PATH for MinGW-w64"
          set PATH=C:\mingw64\bin;%PATH%
          g++ --version || (echo "g++ installation failed. Please check the installation." && exit 1)
  
      - name: Update version
        run: |
          if [ "${{ github.event.inputs.increase_version }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-version
          elif [ "${{ github.event.inputs.increase_major }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-major
          elif [ "${{ github.event.inputs.increase_minor }}" = "true" ]; then
            python "${{ env.SOURCE_DIR }}\update_version.py" --increase-minor
          else
            python "${{ env.SOURCE_DIR }}\update_version.py"
          fi
        shell: bash

      - name: Get all tags for correct version determination
        working-directory: ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      # - name: Install Qt
      #   if: steps.cache-qt.outputs.cache-hit != 'true'
      #   uses: jurplel/install-qt-action@v4
      #   with:
      #     version: ${{ env.QT_VERSION }}
      #     host: windows
      #     target: desktop
      #     arch: win64_mingw
      #     dir: ${{ runner.temp }}
      #     modules: qtmultimedia qtserialport
      #     setup-python: false

      # - name: Download and Unzip Jom
      #   if: steps.cache-jom.outputs.cache-hit != 'true'
      #   working-directory: ${{ runner.temp }}
      #   run: |
      #     curl -L -o jom.zip "http://download.qt.io/official_releases/jom/jom.zip"
      #     7z x jom.zip -ojom

      # - name: Set up Visual Studio shell
      #   uses: egor-tensin/vs-shell@v2
      #   with:
      #     arch: x64
      
      - name: Build Qt Statically
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          call build-script/build-static-qt-from-source.bat

      - name: Create build directory
        run: |
          mkdir ${{ runner.temp }}\build

      - name: Prepare .pro File for Static Build
        run: |
          echo "Checking and appending static build configuration to .pro file..."
          if not exist "${{ env.SOURCE_DIR }}\openterfaceQT.pro" (
            echo "Error: .pro file not found."
            exit 1
          )
          
          findstr /C:"CONFIG += static release" "${{ env.SOURCE_DIR }}\openterfaceQT.pro" >nul
          if errorlevel 1 (
            echo "" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
            echo "CONFIG += static release" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
            echo "Static build configuration added to .pro file."
            set ERRORLEVEL=0
          ) else (
            echo "Static build configuration already present in .pro file."
          )
          
          echo "QMAKE_LFLAGS += -static -static-libgcc -static-libstdc++ -static-libgfortran" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
          echo "QMAKE_CXXFLAGS += -static -static-libgcc -static-libstdc++" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
          echo "QMAKE_LINK = g++ -Wl,-subsystem,windows" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
          echo "CONFIG += static staticlib" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"

      - name: Update and Release Translations
        working-directory: ${{ runner.temp }}\build
        run: |
          echo "Setting up Qt tools path..."
          set PATH=C:\Qt6\bin;C:\mingw64\bin;%PATH%
          echo "Verifying Qt tools..."
          if not exist "C:\Qt6\bin\lupdate.exe" (
            echo "Error: lupdate.exe not found in C:\Qt6\bin"
            exit 1
          )
          echo "Running lupdate..."
          C:\Qt6\bin\lupdate.exe "${{ env.SOURCE_DIR }}\openterfaceQT.pro" || (echo "lupdate failed" && exit 1)
          echo "Running lrelease..."
          C:\Qt6\bin\lrelease.exe "${{ env.SOURCE_DIR }}\openterfaceQT.pro" || (echo "lrelease failed" && exit 1)

      - name: Build
        working-directory: ${{ runner.temp }}\build
        run: |
          echo "Checking Qt configuration..."
          C:\Qt6\bin\qmake -query
          set PATH=C:\Qt6\bin;C:\mingw64\bin;%PATH%
          set INCLUDE=C:\Qt6\include;%INCLUDE%
          
          echo "Building with qmake..."
          
          qmake -r "${{ env.SOURCE_DIR }}\openterfaceQT.pro" "CONFIG+=static staticlib" "QMAKE_LFLAGS+=-static" || (echo "qmake failed. Please check the .pro file and paths." && exit 1)
          echo "Building with mingw32-make..."
          set MINGW_STATIC_BUILD=1
          mingw32-make VERBOSE=1 -j2 || (echo "mingw32-make failed. Please check the build configuration." && exit 1)
          set ERRORLEVEL=0

          echo "\n release dir:"
          dir release
          
          if not exist release\openterfaceQT.exe (
            echo "Error: Failed to build openterfaceQT.exe"
            exit 1
          )
          
          echo "Creating package directory..."
          mkdir ${{ env.PACKAGE_DIR }}
          mkdir ${{ env.PACKAGE_DIR }}\driver
          mkdir ${{ env.PACKAGE_DIR }}\driver\windows
          mkdir ${{ env.PACKAGE_DIR }}\config\languages
          mkdir ${{ env.PACKAGE_DIR }}\config\keyboards

          copy release\openterfaceQT.exe ${{ env.PACKAGE_DIR }}\${{ env.EXE_NAME }}
          copy ${{ env.SOURCE_DIR }}\LICENSE ${{ env.PACKAGE_DIR }}
          copy ${{ env.SOURCE_DIR }}\driver\windows\* ${{ env.PACKAGE_DIR }}\driver\windows
          
          echo "Copying translation & keyboard layouts files..."
          copy ${{ env.SOURCE_DIR }}\config\keyboards\*.json ${{ env.PACKAGE_DIR }}\config\keyboards
          copy ${{ env.SOURCE_DIR }}\config\languages\*.qm ${{ env.PACKAGE_DIR }}\config\languages
          
          echo "Running windeployqt..."
          cd ${{ env.PACKAGE_DIR }}
          windeployqt --qmldir ${{ env.SOURCE_DIR }} ${{ env.EXE_NAME }} --compiler-runtime --multimedia
          

      - name: Move build artifacts
        run: move /Y ${{ runner.temp }}\build\${{ env.PACKAGE_DIR }} ${{ env.SOURCE_DIR }}

      - name: Compile .NSI to .EXE Installer
        run: |
          echo "Compiling NSIS installer..."
          mkdir ${{ env.SOURCE_DIR }}\Output
          dir ${{ env.SOURCE_DIR }}\${{ env.PACKAGE_DIR }}
          makensis /DWorkingDir="${{ env.SOURCE_DIR }}\${{ env.PACKAGE_DIR }}" ^
                   /DMyAppVersion="${{ env.VERSION_FOR_INNO }}" ^
                   /DMyAppPublisher="${{ vars.MY_APP_PUBLISHER }}" ^
                   /DMyAppURL="${{ vars.MY_APP_URL }}" ^
                   /DOutputDir="${{ env.SOURCE_DIR }}\Output" ^
                   /DOutputBaseFileName=openterfaceQT.windows.amd64.installer ^
                   /DMyAppExeName=${{ env.EXE_NAME }} ^
                   installer.nsi

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT.windows.amd64.installer
          path: |
            ${{ env.SOURCE_DIR }}\Output\openterfaceQT.windows.amd64.installer.exe
          if-no-files-found: error

      - name: Commit and push version update
        if: success() && (github.event.inputs.increase_version == 'true' || github.event.inputs.increase_major == 'true' || github.event.inputs.increase_minor == 'true')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add resources/version.h
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" -a || echo "No changes to commit"
          
          git pull --rebase https://${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ github.ref }}
          git push https://${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Trigger other workflows
        if: success() && (github.event.inputs.increase_version == 'true' || github.event.inputs.increase_major == 'true' || github.event.inputs.increase_minor == 'true')
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const workflows = ['linux-portable-build.yaml', 'linux-build.yaml','windows-portable-build.yaml'];
            for (const workflow of workflows) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                ref: context.ref
              });
            }