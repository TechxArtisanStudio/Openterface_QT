---
name: ARM64 Build for Linux

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["dev"]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  ARTIFACT: openterfaceQT-arm64
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.6.3 
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest-arm64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Qt Build
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: /opt/Qt6
          key: $QT_VERSION-arm64-static-optimized
          restore-keys: |
            qt-$QT_VERSION-arm64-static-optimized
            qt-$QT_VERSION-arm64-static

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build Qt Statically
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          # Build Qt with minimal modules and size optimizations
          export QT_MODULES="qtbase qtdeclarative qtsvg qttools qtshadertools"
          export QT_CONFIGURE_OPTS="-optimize-size -no-feature-testlib -no-feature-sql -no-feature-accessibility -no-feature-future -no-feature-regularexpression -no-feature-xmlstream -no-feature-sessionmanager -no-feature-graphic_system"
          export QT_TARGET_DIR="/opt/Qt6"
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-from-source.sh

      - name: Create build directory
        run: |
          mkdir ${{ runner.temp }}/build

      - name: Prepare Driver Files
        run: |
          mkdir -p ${{ env.SOURCE_DIR }}/drivers
          cp driver/linux-arm64/* ${{ env.SOURCE_DIR }}/drivers/ || cp driver/linux/* ${{ env.SOURCE_DIR }}/drivers/

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgles2-mesa-dev \
            libegl1-mesa-dev \
            libglib2.0-dev \
            libpcre2-dev \
            libxrandr2 \
            libxcb1-dev \
            '^libxcb.*-dev' \
            libx11-xcb-dev \
            libglu1-mesa-dev \
            libxrender-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libexpat-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            libx11-dev \
            libdbus-1-dev \
            libdbus-glib-1-dev \
            libpulse-dev \
            libsndfile1-dev \
            libxrandr-dev \
            libxrender-dev \
            libexpat1-dev \
            upx-ucl

      - name: Build ARM64 Executable
        working-directory: ${{ runner.temp }}/build
        run: |
          echo "Setting LD_LIBRARY_PATH..."
          export LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
          
          echo "Configuring with CMake for ARM64..."
          cmake -S "${{ env.SOURCE_DIR }}" -B . \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DBUILD_SHARED_LIBS=OFF \
              -DCMAKE_PREFIX_PATH=/opt/Qt6 \
              -DCMAKE_INSTALL_PREFIX=release \
              -DCMAKE_CXX_FLAGS="-Os -ffunction-sections -fdata-sections" \
              -DCMAKE_C_FLAGS="-Os -ffunction-sections -fdata-sections" \
              -DCMAKE_EXE_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all" \
              -DCMAKE_POLICY_DEFAULT_CMP0177=NEW \
              -DCMAKE_POLICY_DEFAULT_CMP0174=NEW \
              -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
              -DQT_DEBUG_FIND_PACKAGE=ON

          echo "Building with CMake..."
          cmake --build . --verbose || (echo "CMake build failed. Please check the build configuration." && exit 1)

          if [ ! -f openterfaceQT ]; then
            echo "Error: Failed to build openterfaceQT"
            exit 1
          fi

          echo "Stripping executable..."
          strip --strip-all openterfaceQT

          echo "Compressing executable with UPX..."
          upx --best --lzma openterfaceQT

          echo "Creating ARM64 package..."
          mkdir package
          cp openterfaceQT package
          
          echo "Final ARM64 executable size:"
          ls -lh package/openterfaceQT

      - name: Save ARM64 build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}/build/package/openterfaceQT
          if-no-files-found: error
