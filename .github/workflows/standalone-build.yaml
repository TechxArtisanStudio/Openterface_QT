---
    name: Standalone Build
    
    on:
      push:
        branches: ["main", "dev"]
      pull_request:
        branches: ["dev"]
      workflow_dispatch:
    
    defaults:
      run:
        shell: cmd
    
    env:
      ARTIFACT: openterfaceQT-standalone.exe
      SOURCE_DIR: ${{ github.workspace }}
      QT_VERSION: 6.5.3 
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    jobs:
      build:
        runs-on: windows-2022
        steps:
          - uses: actions/checkout@v2
            with:
              fetch-depth: 0
    
          - name: Cache Qt Build
            id: cache-qt
            uses: actions/cache@v3
            with:
                path: C:\Qt6
                key: qt-6.5.3-mingw-windows-static
                restore-keys: |
                  qt-6.5.3-mingw-windows-static
          - name: Cache MinGW and Ninja Build
            id: cache-mingw
            uses: actions/cache@v3
            with:
              path: |
                C:\ProgramData\chocolatey\lib\mingw
                C:\ProgramData\chocolatey\lib\ninja
              key: mingw-ninja-windows-static
              restore-keys: |
                mingw-ninja-windows-static
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
    
          - name: Install Build environment
            run: |
              echo "Installing Ninja"
              choco install ninja -y
        
              echo "Downloading pre-compiled static build of MinGW-w64"
              curl -L -o mingw-w64.zip https://sourceforge.net/projects/mingw-w64/files/latest/download
              mkdir C:\mingw-w64
              tar -xf mingw-w64.zip -C C:\mingw-w64 --strip-components=1
        
              echo "Setting up PATH for MinGW-w64"
              set PATH=C:\mingw-w64\bin;%PATH%
              g++ --version || (echo "g++ installation failed. Please check the installation." && exit 1)
    
          - name: Build Qt Statically
            if: steps.cache-qt.outputs.cache-hit != 'true'
            run: |
              call docker/build-static-qt-from-source.bat
          - name: Create build directory
            run: |
              mkdir ${{ runner.temp }}\build
              
        #   - name: Prepare .pro File for Static Build
        #     run: |
        #       echo "Checking and appending static build configuration to .pro file..."
        #       if not exist "${{ env.SOURCE_DIR }}\openterfaceQT.pro" (
        #         echo "Error: .pro file not found."
        #         exit 1
        #       )
        #       findstr /C:"CONFIG += static release" "${{ env.SOURCE_DIR }}\openterfaceQT.pro" >nul
        #       if errorlevel 1 (
        #         echo "CONFIG += static release" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
        #         echo "QMAKE_LFLAGS += -static -static-libgcc -static-libstdc++ -static-libwinpthread" >> "${{ env.SOURCE_DIR }}\openterfaceQT.pro"
        #         echo "Static build configuration added to .pro file."
        #         set ERRORLEVEL=0  # Reset error level
        #       ) else (
        #         echo "Static build configuration already present in .pro file."
        #       )
        #   - name: Build Standalone Executable
        #     working-directory: ${{ runner.temp }}\build
        #     run: |
        #       echo "Checking Qt configuration..."
        #       C:\Qt6\bin\qmake -query
        #       set PATH=C:\Qt6\bin;%PATH%
              
        #       echo "Building with qmake..."
              
        #       dir /s C:\ProgramData\chocolatey\lib\mingw*
        #       qmake -v
        #       qmake -r "${{ env.SOURCE_DIR }}\openterfaceQT.pro" CONFIG+=release || (echo "qmake failed. Please check the .pro file and paths." && exit 1)
            
        #       echo "Building with mingw32-make..."
        #       mingw32-make -j2 || (echo "mingw32-make failed. Please check the build configuration." && exit 1)
        #       set ERRORLEVEL=0  # Reset error level after build
              
        #       if not exist release\openterfaceQT.exe (
        #         echo "Error: Failed to build openterfaceQT.exe"
        #         exit 1
        #       )
            
        #       echo "Creating standalone package..."
        #       mkdir package
        #       copy release\openterfaceQT.exe package
        #   - name: Save build artifact
        #     uses: actions/upload-artifact@v4
        #     with:
        #       name: ${{ env.ARTIFACT }}
        #       path: ${{ runner.temp }}\build\package\openterfaceQT.exe
        #       if-no-files-found: error 