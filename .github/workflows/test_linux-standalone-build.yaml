---
name: Test Linux Standalone Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

defaults:
  run:
    shell: bash

env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.3

jobs:
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Qt Build
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: /opt/Qt6
          key: qt-6.5.3-linux-static
          restore-keys: |
            qt-6.5.3-linux-static

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
            path: ${{ env.SOURCE_DIR }}/qt-build/
            key: dependencies-cache
            restore-keys: |
              dependencies-cache
              
      - name: Cache FFmpeg
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
            path: ${{ env.SOURCE_DIR }}/ffmpeg-build/
            key: ffmpeg-cache
            restore-keys: |
              ffmpeg-cache

      - name: Install Static BZip2 Library
        run: |
          sudo apt-get update
          sudo apt-get install -y libbz2-dev
          # Verify the static library exists
          test -f /usr/lib/x86_64-linux-gnu/libbz2.a || (echo "Static libbz2 not found!" && exit 1)
          echo "Static libbz2 library found at $(ls -la /usr/lib/x86_64-linux-gnu/libbz2.a)"
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build Qt Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-dependency.sh
  
      - name: Qt Dependencies Already Built
        if: steps.cache-deps.outputs.cache-hit == 'true'
        run: |
          echo "Qt dependencies already built"
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-dependency.sh --no-build
      
      - name: Build FFmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-ffmpeg.sh

      - name: FFmpeg Already Built
        if: steps.cache-ffmpeg.outputs.cache-hit == 'true'
        run: |
          echo "FFmpeg already built"
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-ffmpeg.sh --no-build
          
      - name: Build Qt Statically
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          bash ${{ env.SOURCE_DIR }}/build-script/build-static-qt-from-source.sh

            
      - name: Create test build directory
        run: |
          mkdir -p ${{ runner.temp }}/test-build

      - name: Test CMake Configuration
        working-directory: ${{ runner.temp }}/test-build
        run: |
          # Install minimal dependencies for testing
          sudo apt-get install -y \
            libgles2-mesa-dev \
            libegl1-mesa-dev \
            libx11-dev

          # Test CMake configuration with static libbz2
          cmake -S "${{ env.SOURCE_DIR }}" -B . \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_PREFIX_PATH=/opt/Qt6 \
            -DCMAKE_INSTALL_PREFIX=release \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DQT_DEBUG_FIND_PACKAGE=ON \
            -DCMAKE_CXX_FLAGS="-Os -s" \
            -DCMAKE_C_FLAGS="-Os -s" \
            -DLINK_LIBUSB_STATICALLY=ON \
            -DFREETYPE_INCLUDE_DIRS=/opt/qt6-deps/include/freetype2 \
            -DFREETYPE_LIBRARIES=/opt/qt6-deps/lib/libfreetype.a \
            -DFONTCONFIG_LIBRARIES=/opt/qt6-deps/lib/libfontconfig.a \
            -DEXPAT_LIBRARY_PATH=/opt/qt6-deps/lib/libexpat.a \
            -DLIBUSB_LIB=/usr/lib/libusb-1.0.a \
            -DLIBBZ2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libbz2.a
          
          # Verify that CMake is using the static libbz2
          grep -r "libbz2.a" . || (echo "Static libbz2 not configured properly" && exit 1)

      - name: Verify Fix For Dynamic libbz2 Issue
        run: |
          echo "Testing replacement of dynamic libbz2.so with static libbz2.a"
          
          # Create a simple test file that uses libbz2
          cat > test_bz2.cpp << 'EOF'
          #include <bzlib.h>
          #include <iostream>
          
          int main() {
            std::cout << "Testing BZip2 version: " << BZ2_bzlibVersion() << std::endl;
            return 0;
          }
          EOF
          
          # Try compiling with static linking
          g++ -static test_bz2.cpp -o test_bz2 -lbz2
          
          # Check if it's statically linked
          if ldd test_bz2 2>&1 | grep -q "not a dynamic executable"; then
            echo "Successfully built statically linked executable with libbz2"
          else
            echo "Failed to create statically linked executable"
            exit 1
          fi
      
      - name: Suggested Fix for Main Workflow
        run: |
          echo "Based on tests, here's the recommended fix for linux-standalone-build.yaml:"
          echo "1. Replace '/usr/lib/x86_64-linux-gnu/libbz2.so' with '/usr/lib/x86_64-linux-gnu/libbz2.a'"
          echo "2. Add -DLIBBZ2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libbz2.a to CMake configuration"
          
          # Create a diff patch that could be applied to fix the issue
          cat > bz2_fix.patch << 'EOF'
          --- linux-standalone-build.yaml.old
          +++ linux-standalone-build.yaml
          @@ -164,7 +164,8 @@
                 -DFREETYPE_LIBRARIES=/opt/qt6-deps/lib/libfreetype.a \
                 -DFONTCONFIG_LIBRARIES=/opt/qt6-deps/lib/libfontconfig.a \
                 -DEXPAT_LIBRARY_PATH=/opt/qt6-deps/lib/libexpat.a \
          -       -DLIBUSB_LIB=/usr/lib/libusb-1.0.a
          +       -DLIBUSB_LIB=/usr/lib/libusb-1.0.a \
          +       -DLIBBZ2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libbz2.a
          EOF
          
          # Save the patch as an artifact
          mkdir -p patches
          cp bz2_fix.patch patches/

      - name: Save patch artifact
        uses: actions/upload-artifact@v4
        with:
          name: bz2-fix-patch
          path: patches/bz2_fix.patch
          if-no-files-found: error