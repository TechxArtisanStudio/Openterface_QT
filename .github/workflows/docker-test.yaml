name: Docker Test - Openterface Test Shared & Static

on:
  push:
    branches: ["main", "dev"]
    paths:
      - 'docker/testos/Dockerfile.ubuntu-test-shared'
      - 'docker/testos/Dockerfile.ubuntu-test-static'
      - 'docker/install-openterface-shared.sh'
      - 'docker/install-openterface-static.sh'
      - '.github/workflows/docker-test.yaml'
  pull_request:
    branches: ["main", "dev"]
    paths:
      - 'docker/testos/Dockerfile.ubuntu-test-shared'
      - 'docker/testos/Dockerfile.ubuntu-test-static'
      - 'docker/install-openterface-shared.sh'
      - 'docker/install-openterface-static.sh'
      - '.github/workflows/docker-test.yaml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - 'build-only'
        - 'run-test'
        - 'all'
      build_type:
        description: 'Build type to test'
        required: true
        default: 'both'
        type: choice
        options:
        - 'shared'
        - 'static'
        - 'both'

env:
  DOCKER_IMAGE_SHARED: openterface-test-shared
  DOCKER_IMAGE_STATIC: openterface-test-static
  DOCKER_TAG: test-${{ github.sha }}

jobs:
  build-test-shared:
    if: ${{ github.event.inputs.build_type == 'shared' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (Shared)
        run: |
          echo "🔨 Building Docker image: ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }}"
          docker build \
            -f docker/testos/Dockerfile.ubuntu-test-shared \
            -t ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            docker/

      - name: Verify Docker image (Shared)
        run: |
          echo "✅ Verifying Docker image was built successfully"
          docker images | grep ${{ env.DOCKER_IMAGE_SHARED }}
          
          echo "📊 Image information:"
          docker inspect ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} --format='{{.Config.Env}}'
          docker inspect ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} --format='{{.Config.User}}'
          docker inspect ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} --format='{{.Config.WorkingDir}}'
          
          echo "🔍 Image CMD and Entrypoint:"
          docker inspect ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} --format='{{.Config.Cmd}}'
          docker inspect ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} --format='{{.Config.Entrypoint}}'
          
          echo "🔍 Image layers (last 10):"
          docker history ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} | head -10

      - name: Basic container functionality test (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing basic container functionality"
          
          # Test simple command execution
          echo "🔍 Testing simple command execution..."
          docker run --rm \
            --name openterface-basic-test \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '✅ Container can execute commands'
              whoami
              pwd
              echo 'User ID:' \$(id)
              echo 'Environment variables:'
              env | grep -E 'HOME\\|USER\\|DISPLAY\\|QT_' | head -10
              echo 'File system check:'
              ls -la /home/openterface/ | head -5
              echo '✅ Basic functionality test completed'
            "
          
          echo "✅ Basic container functionality test passed"

      - name: Test container startup (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🚀 Testing container startup"
          
          # First, let's test if the image can run a simple command
          echo "🧪 Testing simple command execution first..."
          if docker run --rm ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} echo "Hello from container"; then
            echo "✅ Simple command execution works"
          else
            echo "❌ Simple command execution failed"
            exit 1
          fi
          
          # Now test container with sleep (override default CMD to avoid GUI issues)
          echo "🧪 Testing container with sleep command..."
          CONTAINER_NAME="openterface-test-container"
          
          # Start container
          docker run -d --name $CONTAINER_NAME ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} sleep 30
          
          echo "✅ Container started with name: $CONTAINER_NAME"
          
          # Wait a moment for container to fully initialize
          echo "⏰ Waiting 3 seconds for container to settle..."
          sleep 3
          
          # Simple check - is container running?
          echo "🔍 Container status check:"
          if docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
            echo "✅ Container is running"
            
            # Test basic functionality
            echo "🧪 Testing container functionality..."
            docker exec $CONTAINER_NAME bash -c "
              echo '🔍 Container info:'
              echo 'User:' \$(whoami)
              echo 'Working directory:' \$(pwd)
              echo 'Home directory contents:'
              ls -la /home/openterface/ | head -5
              echo 'Launcher script check:'
              ls -la /usr/local/bin/start-openterface.sh 2>/dev/null || echo 'Launcher script not found'
              echo '✅ Functionality test completed'
            "
            echo "✅ Container functionality test passed"
          else
            echo "❌ Container is not running"
            echo "🔍 Container status:"
            docker ps -a --filter "name=$CONTAINER_NAME"
            echo "🔍 Container logs:"
            docker logs $CONTAINER_NAME 2>&1 || echo "No logs available"
            exit 1
          fi
          
          # Clean up
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true

      - name: Test installation script (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing installation script"
          
          # Run container and check if openterface is installed
          docker run --rm \
            --name openterface-install-test \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking installed packages...'
              dpkg -l | grep -i openterface || echo 'No openterface package found'
              
              echo '🔍 Checking for openterface binary...'
              which openterfaceQT || echo 'openterfaceQT not in PATH'
              find /usr -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /usr'
              find /opt -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /opt'
              
              echo '🔍 Checking launcher script...'
              ls -la /usr/local/bin/start-openterface.sh || echo 'Launcher script not found'
              
              echo '🔍 Checking udev rules...'
              ls -la /etc/udev/rules.d/*openterface* || echo 'No udev rules found'
              
              echo '🔍 Checking desktop entry...'
              ls -la /usr/share/applications/*openterface* || echo 'No desktop entry found'
              
              echo '🔍 Checking user groups...'
              groups openterface || echo 'User openterface not found'
              
              echo '🔍 Checking shared library dependencies...'
              for binary in \$(find /usr /opt -name 'openterfaceQT' -type f 2>/dev/null); do
                echo \"Binary: \$binary\"
                if command -v ldd >/dev/null 2>&1; then
                  ldd \"\$binary\" | head -10 || echo 'ldd failed'
                else
                  echo 'ldd command not available'
                fi
              done
              
              echo '✅ Installation check completed'
            "

      - name: Test Qt dependencies (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing Qt runtime dependencies"
          
          docker run --rm \
            --name openterface-qt-test \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking Qt6 libraries...'
              ldconfig -p | grep -i qt6 | head -10 || echo 'No Qt6 libraries found'
              
              echo '🔍 Checking specific Qt6 modules...'
              dpkg -l | grep libqt6 | head -10 || echo 'No Qt6 packages found'
              
              echo '🔍 Checking multimedia libraries...'
              dpkg -l | grep multimedia || echo 'No multimedia packages found'
              
              echo '🔍 Checking serial port libraries...'
              dpkg -l | grep serialport || echo 'No serialport packages found'
              
              echo '✅ Qt dependencies check completed'
            "

      - name: Test hardware interface dependencies (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing hardware interface dependencies"
          
          docker run --rm \
            --name openterface-hw-test \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking USB libraries...'
              dpkg -l | grep libusb || echo 'No libusb packages found'
              
              echo '🔍 Checking udev libraries...'
              dpkg -l | grep libudev || echo 'No libudev packages found'
              
              echo '🔍 Checking FFmpeg libraries...'
              dpkg -l | grep libav | head -5 || echo 'No FFmpeg packages found'
              
              echo '🔍 Checking GStreamer...'
              dpkg -l | grep gstreamer | head -5 || echo 'No GStreamer packages found'
              
              echo '✅ Hardware interface dependencies check completed'
            "

      - name: Test application launcher (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing application launcher (non-GUI mode)"
          
          # Test the launcher script exists and is executable
          docker run --rm \
            --name openterface-launcher-test \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              if [ -f '/usr/local/bin/start-openterface.sh' ] && [ -x '/usr/local/bin/start-openterface.sh' ]; then
                echo '✅ Launcher script exists and is executable'
                
                # Test script syntax
                bash -n /usr/local/bin/start-openterface.sh && echo '✅ Launcher script syntax is valid' || echo '❌ Launcher script has syntax errors'
                
                # Test dry run (without actually starting the GUI)
                echo '🧪 Testing launcher script components...'
                timeout 10s bash -c '
                  source /usr/local/bin/start-openterface.sh 2>&1 | head -20
                ' || echo 'ℹ️  Launcher test completed (timeout expected for GUI app)'
              else
                echo '❌ Launcher script not found or not executable'
                exit 1
              fi
            "

      - name: GUI screenshot test using proven script (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Running GUI screenshot test using proven script"
          
          # Make the script executable
          chmod +x docker/screenshot-docker-app.sh
          
          # Update the script to use the CI Docker tag instead of screenshot-test
          sed -i 's/DOCKER_TAG="screenshot-test"/DOCKER_TAG="test-${{ github.sha }}"/' docker/screenshot-docker-app.sh
          sed -i 's/DOCKER_IMAGE="openterface-test"/DOCKER_IMAGE="${{ env.DOCKER_IMAGE_SHARED }}"/' docker/screenshot-docker-app.sh
          
          # Update the script to use screenshots directory instead of app-screenshots
          sed -i 's/SCREENSHOTS_DIR="app-screenshots"/SCREENSHOTS_DIR="screenshots-shared"/' docker/screenshot-docker-app.sh
          
          # Run the proven screenshot script
          echo "🎬 Executing screenshot script..."
          ./docker/screenshot-docker-app.sh
          
          # Additional analysis for CI context
          echo ""
          echo "📊 CI-specific screenshot analysis:"
          echo "=================================="
          
          if [ -d "screenshots-shared" ] && [ "$(ls -A screenshots-shared/*.jpg 2>/dev/null)" ]; then
            echo "✅ Screenshots generated successfully"
            
            # Detailed analysis for CI
            for img in screenshots-shared/*.jpg; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                filesize=$(ls -lh "$img" | awk '{print $5}')
                dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                mean_value=${mean_color%.*}
                
                echo "📸 $filename:"
                echo "   Size: $filesize | Dimensions: $dimensions | Mean: $mean_value"
                
                if [ "$mean_value" -gt 1000 ]; then
                  echo "   Status: ✅ Rich content detected"
                elif [ "$mean_value" -gt 100 ]; then
                  echo "   Status: ⚠️  Basic content detected"
                else
                  echo "   Status: ❌ Likely blank/black"
                fi
                echo ""
              fi
            done
            
            # Summary for CI
            total_jpgs=$(find screenshots-shared/ -name "*.jpg" 2>/dev/null | wc -l)
            content_jpgs=$(find screenshots-shared/ -name "*.jpg" -exec identify -ping -format "%[mean]" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            
            echo "📈 CI Test Summary:"
            echo "   Total JPG screenshots: $total_jpgs"
            echo "   With content: $content_jpgs"
            if [ "$total_jpgs" -gt 0 ]; then
              success_rate=$(( content_jpgs * 100 / total_jpgs ))
              echo "   Success rate: ${success_rate}%"
              
              if [ "$success_rate" -ge 50 ]; then
                echo "   ✅ GUI test PASSED - Application rendered successfully"
              else
                echo "   ⚠️  GUI test PARTIAL - Some content detected but may need investigation"
              fi
            else
              echo "   ❌ GUI test FAILED - No screenshots generated"
            fi
          else
            echo "❌ No screenshots found - script may have failed"
            exit 1
          fi
          
          echo ""
          echo "✅ GUI screenshot test completed"

      - name:  (Shared)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        run: |
          echo "🖼️ Adding screenshots to step summary (Shared)"
          
          # Start the summary
          echo "# 📸 GUI Screenshots - Shared Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type**: Shared Library" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Screenshots available in Artifacts section below**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "screenshots-shared" ] && [ "$(ls -A screenshots-shared/*.jpg 2>/dev/null)" ]; then
            echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            total_jpgs=$(find screenshots-shared/ -name "*.jpg" 2>/dev/null | wc -l)
            content_jpgs=$(find screenshots-shared/ -name "*.jpg" -exec identify -ping -format "%[mean]" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            
            echo "- **Total Screenshots**: $total_jpgs" >> $GITHUB_STEP_SUMMARY
            echo "- **With Content**: $content_jpgs" >> $GITHUB_STEP_SUMMARY
            
            if [ "$total_jpgs" -gt 0 ]; then
              success_rate=$(( content_jpgs * 100 / total_jpgs ))
              echo "- **Success Rate**: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
              
              if [ "$success_rate" -ge 50 ]; then
                echo "- **Status**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **Status**: ⚠️ PARTIAL" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🖼️ Screenshots" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Upload each screenshot as individual artifact and create image links
            screenshot_count=0
            for img in screenshots-shared/*.jpg; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                screenshot_count=$((screenshot_count + 1))
                
                # Create individual artifact for this screenshot
                artifact_name="screenshot-shared-${screenshot_count}-$(echo "$filename" | sed 's/[^a-zA-Z0-9.-]/_/g')"
                
                echo "#### 📷 $filename" >> $GITHUB_STEP_SUMMARY
                
                # Upload image to ImgBB
                echo "🔄 Uploading $filename to ImgBB..." >> $GITHUB_STEP_SUMMARY
                
                # Check if API key is available
                if [ -z "${{ secrets.IMGBB_API_KEY }}" ]; then
                  echo "⚠️ **IMGBB_API_KEY not configured** - Upload skipped" >> $GITHUB_STEP_SUMMARY
                  echo "_Contact repository admin to set up the secret_" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Setup Instructions:**" >> $GITHUB_STEP_SUMMARY
                  echo "1. Get API key from: https://api.imgbb.com/" >> $GITHUB_STEP_SUMMARY
                  echo "2. Add secret IMGBB_API_KEY in repository settings" >> $GITHUB_STEP_SUMMARY
                else
                  # Convert image to base64 for upload
                  image_base64=$(base64 -w 0 "$img" 2>/dev/null || base64 "$img" 2>/dev/null || echo "")
                  
                  if [ -n "$image_base64" ] && [ ${#image_base64} -gt 100 ]; then
                    # Upload to ImgBB API with enhanced error handling
                    echo "🚀 Attempting upload to ImgBB..." >> $GITHUB_STEP_SUMMARY
                    echo "- API Key length: ${#IMGBB_API_KEY}" >> $GITHUB_STEP_SUMMARY
                    echo "- Base64 size: ${#image_base64} chars" >> $GITHUB_STEP_SUMMARY
                    
                    upload_response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\nRESPONSE_TIME:%{time_total}" \
                      -X POST "https://api.imgbb.com/1/upload" \
                      -F "key=${{ secrets.IMGBB_API_KEY }}" \
                      -F "image=$image_base64" \
                      2>&1 || echo '{"success": false, "error": {"message": "Curl command failed"}}')
                    
                    # Extract HTTP status and response
                    http_status=$(echo "$upload_response" | grep "HTTP_STATUS:" | cut -d: -f2 2>/dev/null || echo "unknown")
                    response_time=$(echo "$upload_response" | grep "RESPONSE_TIME:" | cut -d: -f2 2>/dev/null || echo "unknown")
                    json_response=$(echo "$upload_response" | sed '/HTTP_STATUS:/,$d' 2>/dev/null || echo "$upload_response")
                    
                    # Parse the response
                    upload_success=$(echo "$json_response" | grep -o '"success":[^,}]*' | cut -d':' -f2 | tr -d ' ",' || echo "false")
                    
                    # Debug: Show response details
                    echo "🔍 **Debug Info:**" >> $GITHUB_STEP_SUMMARY
                    echo "- HTTP Status: $http_status" >> $GITHUB_STEP_SUMMARY
                    echo "- Response Time: ${response_time}s" >> $GITHUB_STEP_SUMMARY
                    echo "- Response length: ${#json_response} characters" >> $GITHUB_STEP_SUMMARY
                    echo "- Upload success: '$upload_success'" >> $GITHUB_STEP_SUMMARY
                    echo "- Base64 length: ${#image_base64} characters" >> $GITHUB_STEP_SUMMARY
                    
                    # Show first part of response for debugging
                    response_preview=$(echo "$json_response" | head -c 200)
                    echo "- Response preview: \`$response_preview...\`" >> $GITHUB_STEP_SUMMARY
                    
                    if [ "$upload_success" = "true" ]; then
                      # Extract image URLs from response - ImgBB format
                      image_url=$(echo "$json_response" | grep -o '"url":"[^"]*"' | cut -d'"' -f4 | head -1)
                      display_url=$(echo "$json_response" | grep -o '"display_url":"[^"]*"' | cut -d'"' -f4 | head -1)
                      viewer_url=$(echo "$json_response" | grep -o '"url_viewer":"[^"]*"' | cut -d'"' -f4 | head -1)
                      
                      # Use display_url if available, otherwise use url
                      final_url="${display_url:-$image_url}"
                      
                      # Debug URL extraction
                      echo "- Image URL: '$image_url'" >> $GITHUB_STEP_SUMMARY
                      echo "- Display URL: '$display_url'" >> $GITHUB_STEP_SUMMARY
                      echo "- Final URL: '$final_url'" >> $GITHUB_STEP_SUMMARY
                      
                      if [ -n "$final_url" ]; then
                        echo "✅ **Upload successful!**" >> $GITHUB_STEP_SUMMARY
                        echo "" >> $GITHUB_STEP_SUMMARY
                        
                        # Display the image in summary
                        echo "![Screenshot: $filename]($final_url)" >> $GITHUB_STEP_SUMMARY
                        echo "" >> $GITHUB_STEP_SUMMARY
                        echo "🔗 **Direct Link**: [$final_url]($final_url)" >> $GITHUB_STEP_SUMMARY
                        if [ -n "$viewer_url" ]; then
                          echo "🔗 **View Page**: [$viewer_url]($viewer_url)" >> $GITHUB_STEP_SUMMARY
                        fi
                      else
                        echo "⚠️ **Upload successful but URL not found**" >> $GITHUB_STEP_SUMMARY
                        echo "- Raw response: \`$json_response\`" >> $GITHUB_STEP_SUMMARY
                      fi
                    else
                      # Extract error message from ImgBB response
                      error_message=$(echo "$json_response" | grep -o '"message":"[^"]*"' | cut -d'"' -f4 | head -1)
                      echo "❌ **Upload failed**" >> $GITHUB_STEP_SUMMARY
                      echo "- HTTP Status: $http_status" >> $GITHUB_STEP_SUMMARY
                      echo "- Success: '$upload_success'" >> $GITHUB_STEP_SUMMARY
                      echo "- Error: '$error_message'" >> $GITHUB_STEP_SUMMARY
                      echo "- Full response: \`$json_response\`" >> $GITHUB_STEP_SUMMARY
                      
                      # Additional troubleshooting for common issues
                      if [ "$http_status" = "000" ] || [ "$http_status" = "unknown" ]; then
                        echo "" >> $GITHUB_STEP_SUMMARY
                        echo "**Possible Network Issues:**" >> $GITHUB_STEP_SUMMARY
                        echo "- Check GitHub Actions internet connectivity" >> $GITHUB_STEP_SUMMARY
                        echo "- ImgBB API might be temporarily unavailable" >> $GITHUB_STEP_SUMMARY
                        echo "- Curl command might have failed" >> $GITHUB_STEP_SUMMARY
                      elif [ "$http_status" = "400" ] || [ "$http_status" = "401" ]; then
                        echo "" >> $GITHUB_STEP_SUMMARY
                        echo "**API Key Issues:**" >> $GITHUB_STEP_SUMMARY
                        echo "- Verify IMGBB_API_KEY secret is correctly set" >> $GITHUB_STEP_SUMMARY
                        echo "- Check API key validity at https://api.imgbb.com/" >> $GITHUB_STEP_SUMMARY
                      fi
                      echo "❌ **Upload failed**" >> $GITHUB_STEP_SUMMARY
                      echo "- Success: '$upload_success'" >> $GITHUB_STEP_SUMMARY
                      echo "- Error: '$error_message'" >> $GITHUB_STEP_SUMMARY
                      # Extract error message if available
                      error_msg=$(echo "$upload_response" | grep -o '"message":"[^"]*"' | cut -d'"' -f4 || echo "No error message")
                      echo "- Error message: $error_msg" >> $GITHUB_STEP_SUMMARY
                      echo "- Full response: \`$upload_response\`" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo "❌ **Cannot convert image to base64**" >> $GITHUB_STEP_SUMMARY
                    echo "- File exists: $(test -f "$img" && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
                    echo "- File size: $(ls -lh "$img" 2>/dev/null | awk '{print $5}' || echo "Unknown")" >> $GITHUB_STEP_SUMMARY
                    echo "- File readable: $(test -r "$img" && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
                    echo "- Base64 result length: ${#image_base64}" >> $GITHUB_STEP_SUMMARY
                  fi
                fi
                
                echo "" >> $GITHUB_STEP_SUMMARY
                
                # Get basic file info
                filesize=$(ls -lh "$img" | awk '{print $5}')
                echo "- **File Size**: $filesize" >> $GITHUB_STEP_SUMMARY
                
                # Store artifact name for later upload
                echo "$artifact_name|$img" >> /tmp/screenshot_artifacts_shared.txt
                
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📥 How to Download Screenshots" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. **Scroll down** to the **Artifacts** section at the bottom of this page" >> $GITHUB_STEP_SUMMARY
            echo "2. **Download** the following artifacts:" >> $GITHUB_STEP_SUMMARY
            echo "   - \`openterface-gui-screenshots-shared-collection\` - All screenshots in one ZIP" >> $GITHUB_STEP_SUMMARY
            echo "   - \`openterface-gui-screenshots-shared-individual\` - Individual screenshots" >> $GITHUB_STEP_SUMMARY
            echo "3. **Extract** the ZIP files to view the JPG images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "## ❌ No Screenshots Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No screenshots were generated during the test." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload individual screenshots (Shared)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        run: |
          echo "📤 Uploading individual screenshots as artifacts"
          
          # Create temp directory for individual screenshots
          mkdir -p /tmp/individual_screenshots
          
          # Upload each screenshot separately if the artifacts list exists
          if [ -f /tmp/screenshot_artifacts_shared.txt ]; then
            while IFS='|' read -r artifact_name img_path; do
              if [ -f "$img_path" ]; then
                # Copy screenshot to temp directory with clean name
                cp "$img_path" "/tmp/individual_screenshots/$(basename "$img_path")"
                echo "Prepared: $img_path -> $artifact_name"
              fi
            done < /tmp/screenshot_artifacts_shared.txt
          fi
          
          # Also upload the full collection as backup
          if [ -d "screenshots-shared" ] && [ "$(ls -A screenshots-shared/*.jpg 2>/dev/null)" ]; then
            echo "📁 Also creating full screenshots collection"
          fi

      - name: Upload screenshots collection (Shared)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        uses: actions/upload-artifact@v4
        with:
          name: openterface-gui-screenshots-shared-collection
          path: screenshots-shared/
          if-no-files-found: warn

      - name: Upload individual screenshots as artifacts (Shared)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        uses: actions/upload-artifact@v4
        with:
          name: openterface-gui-screenshots-shared-individual
          path: /tmp/individual_screenshots/
          if-no-files-found: warn

      - name: Test container with simulated USB devices (Shared)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing container with simulated USB device access"
          
          # Run container with privileged access to test USB handling
          docker run --rm \
            --privileged \
            --name openterface-usb-test \
            -v /dev:/dev \
            ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking USB device access...'
              ls -la /dev/bus/usb/ 2>/dev/null || echo 'No USB devices found'
              
              echo '🔍 Checking hidraw devices...'
              ls -la /dev/hidraw* 2>/dev/null || echo 'No hidraw devices found'
              
              echo '🔍 Checking ttyUSB devices...'
              ls -la /dev/ttyUSB* 2>/dev/null || echo 'No ttyUSB devices found'
              
              echo '🔍 Testing lsusb command...'
              lsusb || echo 'lsusb command failed'
              
              echo '🔍 Checking for target Openterface devices...'
              lsusb | grep -E '534d\\|1a86' || echo 'No Openterface devices detected (expected in test environment)'
              
              echo '✅ USB device access test completed'
            "

      - name: Clean up Docker resources (Shared)
        if: always()
        run: |
          echo "🧹 Cleaning up Docker resources (Shared)"
          
          # Remove test containers (if any still exist)
          docker ps -aq --filter "name=openterface-" | xargs -r docker rm -f || true
          
          # Remove test image
          docker rmi ${{ env.DOCKER_IMAGE_SHARED }}:${{ env.DOCKER_TAG }} || true
          
          echo "✅ Shared cleanup completed"

  build-test-static:
    if: ${{ github.event.inputs.build_type == 'static' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (Static)
        run: |
          echo "🔨 Building Docker image: ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }}"
          docker build \
            -f docker/testos/Dockerfile.ubuntu-test-static \
            -t ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} \
            docker/

      - name: Verify Docker image (Static)
        run: |
          echo "✅ Verifying Docker image was built successfully"
          docker images | grep ${{ env.DOCKER_IMAGE_STATIC }}
          
          echo "📊 Image information:"
          docker inspect ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} --format='{{.Config.Env}}'
          docker inspect ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} --format='{{.Config.User}}'
          docker inspect ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} --format='{{.Config.WorkingDir}}'
          
          echo "🔍 Image CMD and Entrypoint:"
          docker inspect ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} --format='{{.Config.Cmd}}'
          docker inspect ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} --format='{{.Config.Entrypoint}}'
          
          echo "🔍 Image layers (last 10):"
          docker history ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} | head -10

      - name: Basic container functionality test (Static)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing basic container functionality (Static)"
          
          # Test simple command execution
          echo "🔍 Testing simple command execution..."
          docker run --rm \
            --name openterface-basic-test-static \
            ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '✅ Container can execute commands'
              whoami
              pwd
              echo 'User ID:' \$(id)
              echo 'Environment variables:'
              env | grep -E 'HOME\\|USER\\|DISPLAY\\|QT_' | head -10
              echo 'File system check:'
              ls -la /home/openterface/ | head -5
              echo '✅ Basic functionality test completed'
            "
          
          echo "✅ Basic container functionality test passed"

      - name: Test static binary dependencies
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing static binary dependencies"
          
          # Run container and check binary dependencies with ldd
          docker run --rm \
            --name openterface-static-ldd-test \
            ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Searching for openterface binaries...'
              BINARIES=\$(find /usr /opt -name 'openterfaceQT' -type f 2>/dev/null)
              
              if [ -z \"\$BINARIES\" ]; then
                echo '❌ No openterfaceQT binary found'
                exit 1
              fi
              
              for binary in \$BINARIES; do
                echo \"\"
                echo \"📊 Analyzing binary: \$binary\"
                echo \"=================================\"
                
                # Check if file exists and is executable
                if [ -f \"\$binary\" ] && [ -x \"\$binary\" ]; then
                  echo \"✅ Binary exists and is executable\"
                else
                  echo \"❌ Binary not found or not executable\"
                  continue
                fi
                
                # Get file information
                echo \"📋 File info:\"
                ls -lh \"\$binary\"
                file \"\$binary\" || echo \"file command failed\"
                
                # Check static vs dynamic linking
                echo \"\"
                echo \"🔗 Checking linking type:\"
                if command -v ldd >/dev/null 2>&1; then
                  ldd_output=\$(ldd \"\$binary\" 2>&1 || true)
                  
                  if echo \"\$ldd_output\" | grep -q \"not a dynamic executable\"; then
                    echo \"✅ Binary is FULLY STATICALLY LINKED\"
                    echo \"   No dynamic dependencies found\"
                  elif echo \"\$ldd_output\" | grep -q \"statically linked\"; then
                    echo \"✅ Binary is STATICALLY LINKED\"
                  else
                    echo \"⚠️ Binary appears to have dynamic dependencies:\"
                    echo \"\$ldd_output\" | head -15
                    
                    # Count dependencies
                    dep_count=\$(echo \"\$ldd_output\" | grep -c '=>' || echo \"0\")
                    echo \"\"
                    echo \"📊 Total dynamic dependencies: \$dep_count\"
                    
                    # Check for critical system libraries only
                    critical_deps=\$(echo \"\$ldd_output\" | grep -E 'libc\\.so|libpthread\\.so|libdl\\.so|linux-vdso\\.so|ld-linux' | wc -l)
                    if [ \"\$critical_deps\" -eq \"\$dep_count\" ] || [ \"\$dep_count\" -le 5 ]; then
                      echo \"✅ Only essential system libraries detected (acceptable for 'static' build)\"
                    else
                      echo \"⚠️ Many non-essential dependencies detected\"
                    fi
                  fi
                else
                  echo \"❌ ldd command not available\"
                fi
                
                # Check binary size (static should be larger)
                size_bytes=\$(stat -c%s \"\$binary\" 2>/dev/null || echo \"0\")
                size_mb=\$(( size_bytes / 1024 / 1024 ))
                echo \"\"
                echo \"📏 Binary size: \${size_mb}MB (\${size_bytes} bytes)\"
                
                if [ \"\$size_mb\" -gt 50 ]; then
                  echo \"✅ Large binary size suggests static linking\"
                elif [ \"\$size_mb\" -gt 20 ]; then
                  echo \"⚠️ Medium binary size (could be static or dynamic)\"
                else
                  echo \"❌ Small binary size suggests dynamic linking\"
                fi
              done
              
              echo \"\"
              echo \"✅ Static binary analysis completed\"
            "

      - name: Test installation script (Static)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing installation script (Static)"
          
          # Run container and check if openterface is installed
          docker run --rm \
            --name openterface-install-test-static \
            ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking installed packages...'
              dpkg -l | grep -i openterface || echo 'No openterface package found'
              
              echo '🔍 Checking for openterface binary...'
              which openterfaceQT || echo 'openterfaceQT not in PATH'
              find /usr -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /usr'
              find /opt -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /opt'
              
              echo '🔍 Checking launcher script...'
              ls -la /usr/local/bin/start-openterface.sh || echo 'Launcher script not found'
              
              echo '🔍 Checking udev rules...'
              ls -la /etc/udev/rules.d/*openterface* || echo 'No udev rules found'
              
              echo '🔍 Checking desktop entry...'
              ls -la /usr/share/applications/*openterface* || echo 'No desktop entry found'
              
              echo '🔍 Checking user groups...'
              groups openterface || echo 'User openterface not found'
              
              echo '✅ Installation check completed'
            "

      - name: Test minimal runtime dependencies (Static)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing minimal runtime dependencies (Static)"
          
          docker run --rm \
            --name openterface-minimal-deps-test \
            ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking installed packages (should be minimal)...'
              echo \"Total packages: \$(dpkg -l | wc -l)\"
              
              echo '🔍 Checking Qt6 libraries (should be minimal/none)...'
              qt_packages=\$(dpkg -l | grep libqt6 | wc -l)
              echo \"Qt6 packages installed: \$qt_packages\"
              if [ \"\$qt_packages\" -lt 10 ]; then
                echo \"✅ Minimal Qt6 dependencies (good for static build)\"
              else
                echo \"⚠️ Many Qt6 packages found (may indicate dynamic linking)\"
                dpkg -l | grep libqt6 | head -5
              fi
              
              echo '🔍 Checking multimedia libraries...'
              multimedia_packages=\$(dpkg -l | grep -E 'multimedia|ffmpeg|gstreamer' | wc -l)
              echo \"Multimedia packages: \$multimedia_packages\"
              
              echo '🔍 Checking for development packages (should be none)...'
              dev_packages=\$(dpkg -l | grep -E '\\-dev\\s|\\-devel\\s' | wc -l)
              echo \"Development packages: \$dev_packages\"
              if [ \"\$dev_packages\" -eq 0 ]; then
                echo \"✅ No development packages (good for production image)\"
              else
                echo \"⚠️ Development packages found:\"
                dpkg -l | grep -E '\\-dev\\s|\\-devel\\s' | head -3
              fi
              
              echo '✅ Minimal dependencies check completed'
            "

      - name: GUI screenshot test using proven script (Static)
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Running GUI screenshot test using proven script (Static)"
          
          # Make the script executable
          chmod +x docker/screenshot-docker-app.sh
          
          # Copy and modify the script for static testing
          cp docker/screenshot-docker-app.sh docker/screenshot-docker-app-static.sh
          
          # Update the script to use the static Docker image and tag
          sed -i 's/DOCKER_TAG="screenshot-test"/DOCKER_TAG="test-${{ github.sha }}"/' docker/screenshot-docker-app-static.sh
          sed -i 's/DOCKER_IMAGE="openterface-test"/DOCKER_IMAGE="${{ env.DOCKER_IMAGE_STATIC }}"/' docker/screenshot-docker-app-static.sh
          
          # Update the script to use static screenshots directory
          sed -i 's/SCREENSHOTS_DIR="app-screenshots"/SCREENSHOTS_DIR="screenshots-static"/' docker/screenshot-docker-app-static.sh
          
          # Run the static screenshot script
          echo "🎬 Executing static screenshot script..."
          ./docker/screenshot-docker-app-static.sh
          
          # Additional analysis for CI context
          echo ""
          echo "📊 CI-specific screenshot analysis (Static):"
          echo "============================================="
          
          if [ -d "screenshots-static" ] && [ "$(ls -A screenshots-static/*.jpg 2>/dev/null)" ]; then
            echo "✅ Screenshots generated successfully"
            
            # Detailed analysis for CI
            for img in screenshots-static/*.jpg; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                filesize=$(ls -lh "$img" | awk '{print $5}')
                dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                mean_value=${mean_color%.*}
                
                echo "📸 $filename:"
                echo "   Size: $filesize | Dimensions: $dimensions | Mean: $mean_value"
                
                if [ "$mean_value" -gt 1000 ]; then
                  echo "   Status: ✅ Rich content detected"
                elif [ "$mean_value" -gt 100 ]; then
                  echo "   Status: ⚠️  Basic content detected"
                else
                  echo "   Status: ❌ Likely blank/black"
                fi
                echo ""
              fi
            done
            
            # Summary for CI
            total_jpgs=$(find screenshots-static/ -name "*.jpg" 2>/dev/null | wc -l)
            content_jpgs=$(find screenshots-static/ -name "*.jpg" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            
            echo "📈 CI Test Summary (Static):"
            echo "   Total JPG screenshots: $total_jpgs"
            echo "   With content: $content_jpgs"
            if [ "$total_jpgs" -gt 0 ]; then
              success_rate=$(( content_jpgs * 100 / total_jpgs ))
              echo "   Success rate: ${success_rate}%"
              
              if [ "$success_rate" -ge 50 ]; then
                echo "   ✅ GUI test PASSED - Static application rendered successfully"
              else
                echo "   ⚠️  GUI test PARTIAL - Some content detected but may need investigation"
              fi
            else
              echo "   ❌ GUI test FAILED - No screenshots generated"
            fi
          else
            echo "❌ No screenshots found - script may have failed"
            exit 1
          fi
          
          echo ""
          echo "✅ GUI screenshot test completed (Static)"

      - name: Display screenshots in summary (Static)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        run: |
          echo "🖼️ Adding screenshots to step summary (Static)"
          
          # Add to the summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 📸 GUI Screenshots - Static Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type**: Static Binary" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "💡 **Screenshots available in Artifacts section below**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "screenshots-static" ] && [ "$(ls -A screenshots-static/*.jpg 2>/dev/null)" ]; then
            echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            total_jpgs=$(find screenshots-static/ -name "*.jpg" 2>/dev/null | wc -l)
            content_jpgs=$(find screenshots-static/ -name "*.jpg" -exec identify -ping -format "%[mean]" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            
            echo "- **Total Screenshots**: $total_jpgs" >> $GITHUB_STEP_SUMMARY
            echo "- **With Content**: $content_jpgs" >> $GITHUB_STEP_SUMMARY
            
            if [ "$total_jpgs" -gt 0 ]; then
              success_rate=$(( content_jpgs * 100 / total_jpgs ))
              echo "- **Success Rate**: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
              
              if [ "$success_rate" -ge 50 ]; then
                echo "- **Status**: ✅ PASSED" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **Status**: ⚠️ PARTIAL" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🖼️ Screenshots" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Upload each screenshot as individual artifact and create image links
            screenshot_count=0
            for img in screenshots-static/*.jpg; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                screenshot_count=$((screenshot_count + 1))
                
                # Create individual artifact for this screenshot
                artifact_name="screenshot-static-${screenshot_count}-$(echo "$filename" | sed 's/[^a-zA-Z0-9.-]/_/g')"
                
                echo "### 📷 $filename" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                
                # Upload image to ImgBB
                echo "🔄 Uploading $filename to ImgBB..." >> $GITHUB_STEP_SUMMARY
                
                # Check if API key is available
                if [ -z "${{ secrets.IMGBB_API_KEY }}" ]; then
                  echo "⚠️ **IMGBB_API_KEY not configured** - Upload skipped" >> $GITHUB_STEP_SUMMARY
                  echo "_Contact repository admin to set up the secret_" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Setup Instructions:**" >> $GITHUB_STEP_SUMMARY
                  echo "1. Get API key from: https://api.imgbb.com/" >> $GITHUB_STEP_SUMMARY
                  echo "2. Add secret IMGBB_API_KEY in repository settings" >> $GITHUB_STEP_SUMMARY
                else
                  # Convert image to base64 for upload
                  image_base64=$(base64 -w 0 "$img" 2>/dev/null || base64 "$img" 2>/dev/null || echo "")
                  
                  if [ -n "$image_base64" ] && [ ${#image_base64} -gt 100 ]; then
                    # Upload to ImgBB API with detailed error handling
                    echo "🔍 **Pre-upload checks:**" >> $GITHUB_STEP_SUMMARY
                    echo "- API key length: ${#{{ secrets.IMGBB_API_KEY }}}" >> $GITHUB_STEP_SUMMARY
                    echo "- Base64 length: ${#image_base64}" >> $GITHUB_STEP_SUMMARY
                    echo "- Image file size: $(stat -c%s "$img" 2>/dev/null || echo "unknown") bytes" >> $GITHUB_STEP_SUMMARY
                    
                    # Test connectivity first
                    echo "🌐 Testing connectivity..." >> $GITHUB_STEP_SUMMARY
                    if curl -s --connect-timeout 10 --max-time 30 "https://api.imgbb.com/" >/dev/null; then
                      echo "✅ ImgBB API is reachable" >> $GITHUB_STEP_SUMMARY
                    else
                      echo "❌ Cannot reach ImgBB API" >> $GITHUB_STEP_SUMMARY
                    fi
                    
                    # Perform upload with enhanced error capture
                    upload_response=$(curl -s -w "\nHTTP_STATUS:%{http_code}\nRESPONSE_TIME:%{time_total}" \
                      --connect-timeout 30 \
                      --max-time 120 \
                      -X POST "https://api.imgbb.com/1/upload" \
                      -F "key=${{ secrets.IMGBB_API_KEY }}" \
                      -F "image=$image_base64" \
                      2>&1)
                    
                    # Extract HTTP status and response
                    http_status=$(echo "$upload_response" | grep "HTTP_STATUS:" | cut -d: -f2 || echo "0")
                    response_time=$(echo "$upload_response" | grep "RESPONSE_TIME:" | cut -d: -f2 || echo "0")
                    json_response=$(echo "$upload_response" | sed '/HTTP_STATUS:/,$d')
                    
                    # If no valid JSON response, create error response
                    if [ ${#json_response} -lt 10 ] || ! echo "$json_response" | grep -q '"success"'; then
                      if [ "$http_status" = "0" ]; then
                        json_response='{"success": false, "error": {"message": "Connection failed - no response from server"}}'
                      else
                        json_response='{"success": false, "error": {"message": "Invalid response from server"}}'
                      fi
                    fi                  # Parse the response
                  upload_success=$(echo "$upload_response" | grep -o '"success":[^,}]*' | cut -d':' -f2 | tr -d ' ",' || echo "false")
                  
                  # Debug: Show response details
                  echo "🔍 **Debug Info:**" >> $GITHUB_STEP_SUMMARY
                  echo "- Response length: ${#upload_response} characters" >> $GITHUB_STEP_SUMMARY
                  echo "- Upload success: '$upload_success'" >> $GITHUB_STEP_SUMMARY
                  echo "- Base64 length: ${#image_base64} characters" >> $GITHUB_STEP_SUMMARY
                  
                  # Show first part of response for debugging
                  response_preview=$(echo "$upload_response" | head -c 200)
                  echo "- Response preview: \`$response_preview...\`" >> $GITHUB_STEP_SUMMARY
                  
                  if [ "$upload_success" = "true" ]; then
                    # Extract image URLs from response - ImgBB format
                    image_url=$(echo "$upload_response" | grep -o '"url":"[^"]*"' | cut -d'"' -f4 | head -1)
                    display_url=$(echo "$upload_response" | grep -o '"display_url":"[^"]*"' | cut -d'"' -f4 | head -1)
                    viewer_url=$(echo "$upload_response" | grep -o '"url_viewer":"[^"]*"' | cut -d'"' -f4 | head -1)
                    
                    # Use display_url if available, otherwise use url
                    final_url="${display_url:-$image_url}"
                    
                    # Debug URL extraction
                    echo "- Image URL: '$image_url'" >> $GITHUB_STEP_SUMMARY
                    echo "- Display URL: '$display_url'" >> $GITHUB_STEP_SUMMARY
                    echo "- Final URL: '$final_url'" >> $GITHUB_STEP_SUMMARY
                    
                    if [ -n "$final_url" ]; then
                      echo "✅ **Upload successful!**" >> $GITHUB_STEP_SUMMARY
                      echo "" >> $GITHUB_STEP_SUMMARY
                      
                      # Display the image in summary
                      echo "![Screenshot: $filename]($final_url)" >> $GITHUB_STEP_SUMMARY
                      echo "" >> $GITHUB_STEP_SUMMARY
                      echo "🔗 **Direct Link**: [$final_url]($final_url)" >> $GITHUB_STEP_SUMMARY
                      if [ -n "$viewer_url" ]; then
                        echo "🔗 **View Page**: [$viewer_url]($viewer_url)" >> $GITHUB_STEP_SUMMARY
                      fi
                    else
                      echo "⚠️ **Upload successful but URL not found**" >> $GITHUB_STEP_SUMMARY
                      echo "- Raw response: \`$upload_response\`" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    # Extract error message from ImgBB response
                    error_message=$(echo "$upload_response" | grep -o '"message":"[^"]*"' | cut -d'"' -f4 | head -1)
                    echo "❌ **Upload failed**" >> $GITHUB_STEP_SUMMARY
                    echo "- Success: '$upload_success'" >> $GITHUB_STEP_SUMMARY
                    echo "- Error: '$error_message'" >> $GITHUB_STEP_SUMMARY
                    echo "- Full response: \`$upload_response\`" >> $GITHUB_STEP_SUMMARY
                  fi
                else
                  echo "❌ **Cannot convert image to base64**" >> $GITHUB_STEP_SUMMARY
                  echo "- File exists: $(test -f "$img" && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
                  echo "- File size: $(ls -lh "$img" 2>/dev/null | awk '{print $5}' || echo "Unknown")" >> $GITHUB_STEP_SUMMARY
                  echo "- File readable: $(test -r "$img" && echo "Yes" || echo "No")" >> $GITHUB_STEP_SUMMARY
                  echo "- Base64 result length: ${#image_base64}" >> $GITHUB_STEP_SUMMARY
                fi
              fi
                
                echo "" >> $GITHUB_STEP_SUMMARY
                
                # File analysis
                file_size=$(ls -lh "$img" | awk '{print $5}')
                echo "- **File Size**: $file_size" >> $GITHUB_STEP_SUMMARY
                
                # Store artifact name for later upload
                echo "$artifact_name|$img" >> /tmp/screenshot_artifacts_static.txt
                
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📥 How to Download Screenshots" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. **Scroll down** to the **Artifacts** section at the bottom of this page" >> $GITHUB_STEP_SUMMARY
            echo "2. **Download** the following artifacts:" >> $GITHUB_STEP_SUMMARY
            echo "   - \`openterface-gui-screenshots-static-collection\` - All screenshots in one ZIP" >> $GITHUB_STEP_SUMMARY
            echo "   - \`openterface-gui-screenshots-static-individual\` - Individual screenshots" >> $GITHUB_STEP_SUMMARY
            echo "3. **Extract** the ZIP files to view the JPG images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "## ❌ No Screenshots Available" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No screenshots were generated during the test." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload individual screenshots (Static)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        run: |
          echo "📤 Uploading individual screenshots as artifacts"
          
          # Create temp directory for individual screenshots
          mkdir -p /tmp/individual_screenshots_static
          
          # Upload each screenshot separately if the artifacts list exists
          if [ -f /tmp/screenshot_artifacts_static.txt ]; then
            while IFS='|' read -r artifact_name img_path; do
              if [ -f "$img_path" ]; then
                # Copy screenshot to temp directory with clean name
                cp "$img_path" "/tmp/individual_screenshots_static/$(basename "$img_path")"
                echo "Prepared: $img_path -> $artifact_name"
              fi
            done < /tmp/screenshot_artifacts_static.txt
          fi

      - name: Upload screenshots collection (Static)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        uses: actions/upload-artifact@v4
        with:
          name: openterface-gui-screenshots-static-collection
          path: screenshots-static/
          if-no-files-found: warn

      - name: Upload individual screenshots as artifacts (Static)
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        uses: actions/upload-artifact@v4
        with:
          name: openterface-gui-screenshots-static-individual
          path: /tmp/individual_screenshots_static/
          if-no-files-found: warn

      - name: Clean up Docker resources (Static)
        if: always()
        run: |
          echo "🧹 Cleaning up Docker resources (Static)"
          
          # Remove test containers (if any still exist)
          docker ps -aq --filter "name=openterface-" | xargs -r docker rm -f || true
          
          # Remove test image
          docker rmi ${{ env.DOCKER_IMAGE_STATIC }}:${{ env.DOCKER_TAG }} || true
          
          echo "✅ Static cleanup completed"

  generate-combined-report:
    if: always()
    needs: [build-test-shared, build-test-static]
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download shared screenshots
        if: ${{ github.event.inputs.build_type == 'shared' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          name: openterface-gui-screenshots-shared-collection
          path: screenshots-shared/
        continue-on-error: true
        
      - name: Download static screenshots
        if: ${{ github.event.inputs.build_type == 'static' || github.event.inputs.build_type == 'both' || github.event_name != 'workflow_dispatch' }}
        uses: actions/download-artifact@v4
        with:
          name: openterface-gui-screenshots-static-collection
          path: screenshots-static/
        continue-on-error: true

      - name: Generate comprehensive test report
        run: |
          echo "📋 Generating comprehensive test report"
          
          # Add combined summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 📋 Combined Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Overall Comparison" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Build Type | Screenshots | With Content | Success Rate | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------------|--------------|--------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Shared results
          if [ -d "screenshots-shared" ]; then
            total_shared=$(find screenshots-shared/ -name "*.jpg" 2>/dev/null | wc -l)
            content_shared=$(find screenshots-shared/ -name "*.jpg" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            if [ "$total_shared" -gt 0 ]; then
              shared_rate=$(( content_shared * 100 / total_shared ))
              if [ "$shared_rate" -ge 50 ]; then
                status="✅ PASSED"
              else
                status="⚠️ PARTIAL"
              fi
              echo "| 🔗 Shared | $total_shared | $content_shared | $shared_rate% | $status |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| 🔗 Shared | 0 | 0 | N/A | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| 🔗 Shared | 0 | 0 | N/A | ❌ NOT RUN |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Static results
          if [ -d "screenshots-static" ]; then
            total_static=$(find screenshots-static/ -name "*.jpg" 2>/dev/null | wc -l)
            content_static=$(find screenshots-static/ -name "*.jpg" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 100) count++} END {print count+0}')
            if [ "$total_static" -gt 0 ]; then
              static_rate=$(( content_static * 100 / total_static ))
              if [ "$static_rate" -ge 50 ]; then
                status="✅ PASSED"
              else
                status="⚠️ PARTIAL"
              fi
              echo "| ⚡ Static | $total_static | $content_static | $static_rate% | $status |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| ⚡ Static | 0 | 0 | N/A | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| ⚡ Static | 0 | 0 | N/A | ❌ NOT RUN |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Generated on**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          
          # Also create the markdown file for artifact
          cat << 'EOF' > combined-test-report.md
          # 📸 Combined GUI Testing Report - Openterface QT
          
          ## Test Overview
          - **Workflow**: ${{ github.workflow }}
          - **Run ID**: ${{ github.run_id }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Test Date**: $(date -u)
          - **Build Types**: ${{ github.event.inputs.build_type || 'both' }}
          
          EOF
          
          # ... rest of existing report generation code ...
          
          echo ""
          echo "✅ Combined test report generated and added to summary"

      - name: Upload combined test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: combined-test-report
          path: combined-test-report.md
          if-no-files-found: warn
# Trigger workflow - Sun Sep  7 06:45:09 AM CST 2025
