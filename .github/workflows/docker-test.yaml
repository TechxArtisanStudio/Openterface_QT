name: Docker Test - Openterface Test Dynamic

on:
  push:
    branches: ["main", "dev"]
    paths:
      - 'docker/Dockerfile.openterface-test-shared'
      - 'docker/install-openterface-shared.sh'
      - '.github/workflows/docker-test.yaml'
  pull_request:
    branches: ["main", "dev"]
    paths:
      - 'docker/Dockerfile.openterface-test-shared'
      - 'docker/install-openterface-shared.sh'
      - '.github/workflows/docker-test.yaml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
        - 'build-only'
        - 'run-test'
        - 'all'

env:
  DOCKER_IMAGE: openterface-test-shared
  DOCKER_TAG: test-${{ github.sha }}

jobs:
  build-test:
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "🔨 Building Docker image: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}"
          docker build \
            -f docker/Dockerfile.openterface-test-shared \
            -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            docker/

      - name: Verify Docker image
        run: |
          echo "✅ Verifying Docker image was built successfully"
          docker images | grep ${{ env.DOCKER_IMAGE }}
          
          echo "📊 Image information:"
          docker inspect ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format='{{.Config.Env}}'
          docker inspect ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format='{{.Config.User}}'
          docker inspect ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format='{{.Config.WorkingDir}}'
          
          echo "🔍 Image CMD and Entrypoint:"
          docker inspect ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format='{{.Config.Cmd}}'
          docker inspect ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format='{{.Config.Entrypoint}}'
          
          echo "🔍 Image layers (last 10):"
          docker history ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} | head -10

      - name: Basic container functionality test
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing basic container functionality"
          
          # Test simple command execution
          echo "🔍 Testing simple command execution..."
          docker run --rm \
            --name openterface-basic-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '✅ Container can execute commands'
              whoami
              pwd
              echo 'User ID:' \$(id)
              echo 'Environment variables:'
              env | grep -E 'HOME\\|USER\\|DISPLAY\\|QT_' | head -10
              echo 'File system check:'
              ls -la /home/openterface/ | head -5
              echo '✅ Basic functionality test completed'
            "
          
          echo "✅ Basic container functionality test passed"

      - name: Test container startup
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🚀 Testing container startup"
          
          # First, let's test if the image can run a simple command
          echo "🧪 Testing simple command execution first..."
          if docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} echo "Hello from container"; then
            echo "✅ Simple command execution works"
          else
            echo "❌ Simple command execution failed"
            exit 1
          fi
          
          # Now test container with sleep (override default CMD to avoid GUI issues)
          echo "🧪 Testing container with sleep command..."
          CONTAINER_NAME="openterface-test-container"
          
          # Start container
          docker run -d --name $CONTAINER_NAME ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} sleep 30
          
          echo "✅ Container started with name: $CONTAINER_NAME"
          
          # Wait a moment for container to fully initialize
          echo "⏰ Waiting 3 seconds for container to settle..."
          sleep 3
          
          # Simple check - is container running?
          echo "🔍 Container status check:"
          if docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
            echo "✅ Container is running"
            
            # Test basic functionality
            echo "🧪 Testing container functionality..."
            docker exec $CONTAINER_NAME bash -c "
              echo '🔍 Container info:'
              echo 'User:' \$(whoami)
              echo 'Working directory:' \$(pwd)
              echo 'Home directory contents:'
              ls -la /home/openterface/ | head -5
              echo 'Launcher script check:'
              ls -la /usr/local/bin/start-openterface.sh 2>/dev/null || echo 'Launcher script not found'
              echo '✅ Functionality test completed'
            "
            echo "✅ Container functionality test passed"
          else
            echo "❌ Container is not running"
            echo "🔍 Container status:"
            docker ps -a --filter "name=$CONTAINER_NAME"
            echo "🔍 Container logs:"
            docker logs $CONTAINER_NAME 2>&1 || echo "No logs available"
            exit 1
          fi
          
          # Clean up
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true

      - name: Test installation script
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing installation script"
          
          # Run container and check if openterface is installed
          docker run --rm \
            --name openterface-install-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking installed packages...'
              dpkg -l | grep -i openterface || echo 'No openterface package found'
              
              echo '🔍 Checking for openterface binary...'
              which openterfaceQT || echo 'openterfaceQT not in PATH'
              find /usr -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /usr'
              find /opt -name 'openterfaceQT' -type f 2>/dev/null || echo 'No openterfaceQT binary found in /opt'
              
              echo '🔍 Checking launcher script...'
              ls -la /usr/local/bin/start-openterface.sh || echo 'Launcher script not found'
              
              echo '🔍 Checking udev rules...'
              ls -la /etc/udev/rules.d/*openterface* || echo 'No udev rules found'
              
              echo '🔍 Checking desktop entry...'
              ls -la /usr/share/applications/*openterface* || echo 'No desktop entry found'
              
              echo '🔍 Checking user groups...'
              groups openterface || echo 'User openterface not found'
              
              echo '✅ Installation check completed'
            "

      - name: Test Qt dependencies
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing Qt runtime dependencies"
          
          docker run --rm \
            --name openterface-qt-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking Qt6 libraries...'
              ldconfig -p | grep -i qt6 | head -10 || echo 'No Qt6 libraries found'
              
              echo '🔍 Checking specific Qt6 modules...'
              dpkg -l | grep libqt6 | head -10 || echo 'No Qt6 packages found'
              
              echo '🔍 Checking multimedia libraries...'
              dpkg -l | grep multimedia || echo 'No multimedia packages found'
              
              echo '🔍 Checking serial port libraries...'
              dpkg -l | grep serialport || echo 'No serialport packages found'
              
              echo '✅ Qt dependencies check completed'
            "

      - name: Test hardware interface dependencies
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing hardware interface dependencies"
          
          docker run --rm \
            --name openterface-hw-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking USB libraries...'
              dpkg -l | grep libusb || echo 'No libusb packages found'
              
              echo '🔍 Checking udev libraries...'
              dpkg -l | grep libudev || echo 'No libudev packages found'
              
              echo '🔍 Checking FFmpeg libraries...'
              dpkg -l | grep libav | head -5 || echo 'No FFmpeg packages found'
              
              echo '🔍 Checking GStreamer...'
              dpkg -l | grep gstreamer | head -5 || echo 'No GStreamer packages found'
              
              echo '✅ Hardware interface dependencies check completed'
            "

      - name: Test application launcher
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing application launcher (non-GUI mode)"
          
          # Test the launcher script exists and is executable
          docker run --rm \
            --name openterface-launcher-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              if [ -f '/usr/local/bin/start-openterface.sh' ] && [ -x '/usr/local/bin/start-openterface.sh' ]; then
                echo '✅ Launcher script exists and is executable'
                
                # Test script syntax
                bash -n /usr/local/bin/start-openterface.sh && echo '✅ Launcher script syntax is valid' || echo '❌ Launcher script has syntax errors'
                
                # Test dry run (without actually starting the GUI)
                echo '🧪 Testing launcher script components...'
                timeout 10s bash -c '
                  source /usr/local/bin/start-openterface.sh 2>&1 | head -20
                ' || echo 'ℹ️  Launcher test completed (timeout expected for GUI app)'
              else
                echo '❌ Launcher script not found or not executable'
                exit 1
              fi
            "

      - name: Test default CMD behavior with virtual display
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing default CMD behavior with virtual display"
          
          # Install Xvfb and screenshot tools with better configuration
          sudo apt-get update -y
          sudo apt-get install -y xvfb imagemagick scrot x11-utils xauth
          
          # Start Xvfb virtual display with optimized settings
          export DISPLAY=:99
          echo "🖥️  Starting virtual display with optimized configuration..."
          Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
          XVFB_PID=$!
          
          # Wait for Xvfb to start properly
          sleep 5
          
          echo "🖥️  Virtual display started on $DISPLAY"
          
          # Verify X server is running and set up minimal environment
          if DISPLAY=:99 xdpyinfo >/dev/null 2>&1; then
            echo "✅ X server is responding"
            
            # Set up X11 authentication and suppress warnings
            export XAUTHORITY=/tmp/.Xauth$$
            xauth generate :99 . trusted 2>/dev/null || echo "ℹ️  Xauth setup not critical"
            
            # Configure minimal keyboard to reduce warnings
            DISPLAY=:99 setxkbmap us 2>/dev/null || echo "ℹ️  Keyboard setup not critical"
          else
            echo "❌ X server not responding"
            exit 1
          fi
          
          # Create directory for screenshots
          mkdir -p screenshots
          
          # Test default CMD with virtual display
          echo "🚀 Running openterface with virtual display for 15 seconds..."
          
          CONTAINER_ID=$(docker run -d \
            --name openterface-gui-test \
            -e DISPLAY=$DISPLAY \
            -v /tmp/.X11-unix:/tmp/.X11-unix:rw \
            --network host \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }})
          
          echo "Container ID: ${CONTAINER_ID:0:12}"
          
          # Wait a few seconds for app to start
          echo "⏰ Waiting 5 seconds for application to initialize..."
          sleep 5
          
          # Take initial screenshot with error suppression
          echo "📸 Taking initial screenshot..."
          DISPLAY=:99 scrot screenshots/openterface_initial.png 2>/dev/null || echo "ℹ️  Initial screenshot skipped (display may be empty)"
          
          # Wait more time
          echo "⏰ Waiting additional 5 seconds..."
          sleep 5
          
          # Take second screenshot with error suppression
          echo "📸 Taking second screenshot..."
          DISPLAY=:99 scrot screenshots/openterface_5sec.png 2>/dev/null || echo "ℹ️  Second screenshot skipped"
          
          # Check if container is still running
          if docker ps | grep -q $CONTAINER_ID; then
            echo "✅ Container is running with GUI"
            
            # Get container logs
            echo "📋 Container logs:"
            docker logs $CONTAINER_ID 2>&1
            
            # Test container responsiveness
            echo "🧪 Testing container responsiveness..."
            docker exec $CONTAINER_ID ps aux | grep openterfaceQT || echo "openterfaceQT process not found"
            
            # Take final screenshot with error suppression
            echo "📸 Taking final screenshot..."
            DISPLAY=:99 scrot screenshots/openterface_final.png 2>/dev/null || echo "ℹ️  Final screenshot skipped"
            
            # Try to get window information with reduced verbosity
            echo "🪟 Window information:"
            window_info=$(DISPLAY=:99 xwininfo -tree -root 2>/dev/null | head -10 || echo "No windows detected")
            if echo "$window_info" | grep -q 'child'; then
              echo "✅ GUI windows detected"
              echo "$window_info"
            else
              echo "ℹ️  No GUI windows detected"
            fi
            
          else
            echo "⚠️  Container exited, checking logs..."
            docker logs $CONTAINER_ID 2>&1
            
            # Still try to take a screenshot of the desktop with error suppression
            echo "📸 Taking desktop screenshot after container exit..."
            DISPLAY=:99 scrot screenshots/openterface_after_exit.png 2>/dev/null || echo "ℹ️  Desktop screenshot skipped"
          fi
          
          # Wait a bit more and take one more screenshot
          echo "⏰ Final 5 second wait..."
          sleep 5
          echo "📸 Taking very final screenshot..."
          DISPLAY=:99 scrot screenshots/openterface_very_final.png 2>/dev/null || echo "ℹ️  Very final screenshot skipped"
          
          # List all screenshots taken
          echo "📸 Screenshots captured:"
          ls -la screenshots/ || echo "No screenshots directory"
          
          # Get screenshot file sizes and detailed analysis
          if [ -d "screenshots" ]; then
            echo "📊 Screenshot details:"
            echo "===================="
            printf "%-25s | %-8s | %-12s | %-15s | %s\n" "Filename" "Size" "Dimensions" "Mean Color" "Content Status"
            echo "$(printf '%.0s-' {1..80})"
            
            for img in screenshots/*.png; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                filesize=$(ls -lh "$img" | awk '{print $5}')
                
                # Get image dimensions
                dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                
                # Get mean color value to detect content
                mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                mean_value=${mean_color%.*}
                
                # Determine content status
                if [ "$mean_value" -gt 2000 ]; then
                  content_status="✅ Content detected"
                elif [ "$mean_value" -gt 500 ]; then
                  content_status="⚠️  Minimal content"
                else
                  content_status="❌ Likely blank/black"
                fi
                
                printf "%-25s | %-8s | %-12s | %-15s | %s\n" "$filename" "$filesize" "$dimensions" "$mean_value" "$content_status"
                
                # Additional analysis for suspicious images
                if [ "$mean_value" -lt 500 ]; then
                  echo "  🔍 Detailed analysis: $(identify -verbose "$img" 2>/dev/null | grep -E 'Colors\\|Histogram' | head -2 || echo 'Cannot analyze')"
                fi
              fi
            done
            echo ""
            
            # Summary statistics
            total_screenshots=$(find screenshots/ -name "*.png" | wc -l)
            content_screenshots=$(find screenshots/ -name "*.png" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 500) count++} END {print count+0}')
            
            echo "📈 Summary:"
            echo "  Total screenshots: $total_screenshots"
            echo "  With content: $content_screenshots"
            echo "  Success rate: $(( content_screenshots * 100 / total_screenshots ))%"
            
            # Show first few pixels of each image for debugging
            echo ""
            echo "🔍 First pixel analysis (for debugging):"
            for img in screenshots/*.png; do
              if [ -f "$img" ]; then
                first_pixel=$(convert "$img" -crop 1x1+0+0 txt:- 2>/dev/null | tail -1 | cut -d' ' -f4 || echo "unknown")
                echo "  $(basename "$img"): First pixel = $first_pixel"
              fi
            done
          fi
          
          # Clean up container
          echo "🛑 Stopping container..."
          docker stop $CONTAINER_ID 2>/dev/null || true
          docker rm $CONTAINER_ID 2>/dev/null || true
          
          # Clean up Xvfb
          kill $XVFB_PID 2>/dev/null || true
          
          echo "✅ GUI test with virtual display completed"

      - name: Upload screenshots
        if: ${{ always() && (github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch') }}
        uses: actions/upload-artifact@v4
        with:
          name: openterface-gui-screenshots
          path: screenshots/
          if-no-files-found: warn

      - name: Test container with simulated USB devices
        if: ${{ github.event.inputs.test_type == 'run-test' || github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🧪 Testing container with simulated USB device access"
          
          # Run container with privileged access to test USB handling
          docker run --rm \
            --privileged \
            --name openterface-usb-test \
            -v /dev:/dev \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking USB device access...'
              ls -la /dev/bus/usb/ 2>/dev/null || echo 'No USB devices found'
              
              echo '🔍 Checking hidraw devices...'
              ls -la /dev/hidraw* 2>/dev/null || echo 'No hidraw devices found'
              
              echo '🔍 Checking ttyUSB devices...'
              ls -la /dev/ttyUSB* 2>/dev/null || echo 'No ttyUSB devices found'
              
              echo '🔍 Testing lsusb command...'
              lsusb || echo 'lsusb command failed'
              
              echo '🔍 Checking for target Openterface devices...'
              lsusb | grep -E '534d\\|1a86' || echo 'No Openterface devices detected (expected in test environment)'
              
              echo '✅ USB device access test completed'
            "

      - name: Security scan
        if: ${{ github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "🔒 Running basic security checks"
          
          # Check for security best practices
          docker run --rm \
            --name openterface-security-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            bash -c "
              echo '🔍 Checking user configuration...'
              whoami
              id
              
              echo '🔍 Checking sudo configuration...'
              sudo -n echo 'Passwordless sudo working' 2>/dev/null || echo 'Passwordless sudo not configured (this might be expected)'
              
              echo '🔍 Checking file permissions on key files...'
              ls -la /etc/udev/rules.d/*openterface* 2>/dev/null || echo 'No openterface udev rules found'
              ls -la /usr/local/bin/start-openterface.sh 2>/dev/null || echo 'Launcher script not found'
              
              echo '🔍 Checking for setuid binaries (security check)...'
              find /usr/local/bin -perm /4000 -type f 2>/dev/null || echo 'No setuid binaries found in /usr/local/bin'
              
              echo '✅ Security check completed'
            "

      - name: Performance test
        if: ${{ github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
        run: |
          echo "⚡ Running performance tests"
          
          # Test container startup time and resource usage
          echo "🧪 Testing container startup performance..."
          
          START_TIME=$(date +%s%N)
          CONTAINER_ID=$(docker run -d \
            --name openterface-perf-test \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            sleep 10)
          END_TIME=$(date +%s%N)
          
          STARTUP_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
          echo "📊 Container startup time: ${STARTUP_TIME}ms"
          
          # Wait for container to be fully started
          sleep 2
          
          # Check resource usage
          echo "📊 Container resource usage:"
          docker stats --no-stream $CONTAINER_ID || echo "⚠️ Could not get container stats"
          
          # Check image size
          echo "📊 Image size:"
          docker images ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"
          
          # Clean up
          docker stop $CONTAINER_ID || true
          docker rm $CONTAINER_ID || true
          
          echo "✅ Performance test completed"

      - name: Generate comprehensive GUI test report
        if: always()
        run: |
          echo "📋 Generating comprehensive GUI test report"
          
          cat << 'EOF' > gui-test-report.md
          # 📸 GUI Testing Report - Openterface QT
          
          ## Test Overview
          - **Workflow**: ${{ github.workflow }}
          - **Run ID**: ${{ github.run_id }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Test Date**: $(date -u)
          
          ## Screenshots Analysis
          
          EOF
          
          # Add container testing results
          echo "### 🐳 Direct Container Testing" >> gui-test-report.md
          echo "" >> gui-test-report.md
          
          if [ -d "screenshots" ] && [ "$(ls -A screenshots/*.png 2>/dev/null)" ]; then
            echo "| Filename | Size | Dimensions | Mean Color | Content Status |" >> gui-test-report.md
            echo "|----------|------|------------|------------|----------------|" >> gui-test-report.md
            
            for img in screenshots/*.png; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                filesize=$(ls -lh "$img" | awk '{print $5}')
                dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                mean_value=${mean_color%.*}
                
                if [ "$mean_value" -gt 2000 ]; then
                  content_status="✅ Content detected"
                elif [ "$mean_value" -gt 500 ]; then
                  content_status="⚠️ Minimal content"
                else
                  content_status="❌ Likely blank"
                fi
                
                echo "| $filename | $filesize | $dimensions | $mean_value | $content_status |" >> gui-test-report.md
              fi
            done
            
            # Add summary
            total_container=$(find screenshots/ -name "*.png" | wc -l)
            content_container=$(find screenshots/ -name "*.png" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 500) count++} END {print count+0}')
            echo "" >> gui-test-report.md
            echo "**Container Test Summary**: $content_container/$total_container screenshots with content ($(( content_container * 100 / total_container ))% success rate)" >> gui-test-report.md
          else
            echo "❌ No container screenshots found" >> gui-test-report.md
          fi
          
          echo "" >> gui-test-report.md
          echo "### 🚀 Launcher Script Testing" >> gui-test-report.md
          echo "" >> gui-test-report.md
          
          if [ -d "integration-screenshots" ] && [ "$(ls -A integration-screenshots/*.png 2>/dev/null)" ]; then
            echo "| Filename | Size | Dimensions | Mean Color | Content Status |" >> gui-test-report.md
            echo "|----------|------|------------|------------|----------------|" >> gui-test-report.md
            
            for img in integration-screenshots/*.png; do
              if [ -f "$img" ]; then
                filename=$(basename "$img")
                filesize=$(ls -lh "$img" | awk '{print $5}')
                dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                mean_value=${mean_color%.*}
                
                if [ "$mean_value" -gt 2000 ]; then
                  content_status="✅ Content detected"
                elif [ "$mean_value" -gt 500 ]; then
                  content_status="⚠️ Minimal content"
                else
                  content_status="❌ Likely blank"
                fi
                
                echo "| $filename | $filesize | $dimensions | $mean_value | $content_status |" >> gui-test-report.md
              fi
            done
            
            # Add summary
            total_launcher=$(find integration-screenshots/ -name "*.png" 2>/dev/null | wc -l)
            content_launcher=$(find integration-screenshots/ -name "*.png" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 500) count++} END {print count+0}')
            echo "" >> gui-test-report.md
            echo "**Launcher Test Summary**: $content_launcher/$total_launcher screenshots with content ($(( content_launcher * 100 / total_launcher ))% success rate)" >> gui-test-report.md
          else
            echo "❌ No launcher screenshots found" >> gui-test-report.md
          fi
          
          # Add troubleshooting information
          echo "" >> gui-test-report.md
          echo "### 🔍 Troubleshooting Information" >> gui-test-report.md
          echo "" >> gui-test-report.md
          echo "#### Virtual Display Status" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          ps aux | grep Xvfb | grep -v grep || echo "No Xvfb processes found" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          echo "" >> gui-test-report.md
          
          echo "#### Docker Containers" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          docker ps -a | grep openterface || echo "No openterface containers found" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          echo "" >> gui-test-report.md
          
          echo "#### System Information" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          echo "OS: $(uname -a)" >> gui-test-report.md
          echo "Docker version: $(docker --version)" >> gui-test-report.md
          echo "ImageMagick version: $(identify -version | head -1)" >> gui-test-report.md
          echo '```' >> gui-test-report.md
          
          # Display the report in the action log
          echo "📊 Full GUI Test Report:"
          echo "========================"
          cat gui-test-report.md
          
          echo ""
          echo "✅ Comprehensive GUI test report generated"

      - name: Upload GUI test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gui-test-report
          path: gui-test-report.md
          if-no-files-found: warn

      - name: Clean up Docker resources
        if: always()
        run: |
          echo "🧹 Cleaning up Docker resources"
          
          # Remove test containers (if any still exist)
          docker ps -aq --filter "name=openterface-" | xargs -r docker rm -f || true
          
          # Remove test image
          docker rmi ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} || true
          
          # Show remaining Docker resources
          echo "📊 Remaining Docker images:"
          docker images | head -10 || true
          
          echo "✅ Cleanup completed"

  # Integration test job that tests the actual installation process
  integration-test:
    runs-on: ubuntu-24.04
    needs: build-test
    if: ${{ github.event.inputs.test_type == 'all' || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test installation script independently
        run: |
          echo "🧪 Testing installation script independently"
          
          # Create a test Ubuntu container and run the install script
          docker run --rm \
            -v ${{ github.workspace }}/docker/install-openterface-shared.sh:/tmp/install-openterface-shared.sh \
            ubuntu:24.04 \
            bash -c "
              apt-get update -y
              apt-get install -y curl wget ca-certificates sudo
              chmod +x /tmp/install-openterface-shared.sh
              
              echo '🚀 Running installation script...'
              /tmp/install-openterface-shared.sh
              
              echo '✅ Installation script test completed'
            "

      - name: End-to-end test with real download
        run: |
          echo "🧪 End-to-end test with real package download"
          
          # Build the Docker image and test the full installation process
          docker build \
            -f docker/Dockerfile.openterface-test-shared \
            -t openterface-e2e-test \
            docker/
          
          # Run the container and verify everything works
          docker run --rm \
            --name openterface-e2e-test \
            openterface-e2e-test \
            bash -c "
              echo '🔍 Verifying full installation...'
              
              # Check if the package was downloaded and installed
              dpkg -l | grep -i openterface && echo '✅ Package installed' || echo '❌ Package not found'
              
              # Check if binary exists
              which openterfaceQT && echo '✅ Binary in PATH' || find /usr /opt -name 'openterfaceQT' -type f 2>/dev/null | head -1 | xargs -I {} echo '✅ Binary found at: {}'
              
              # Check launcher script
              [ -x '/usr/local/bin/start-openterface.sh' ] && echo '✅ Launcher script ready' || echo '❌ Launcher script missing'
              
              echo '✅ End-to-end test completed'
            "
          
          # Clean up
          docker rmi openterface-e2e-test || true

      - name: Test with GUI launcher script
        run: |
          echo "🧪 Testing GUI launcher script simulation"
          
          # Copy the launcher script to test it
          cp docker/run-openterface-docker.sh /tmp/test-launcher.sh
          chmod +x /tmp/test-launcher.sh
          
          # Build image with correct name expected by launcher
          docker build \
            -f docker/Dockerfile.openterface-test-shared \
            -t openterface-test \
            docker/
          
          # Test the launcher script help
          echo "🔍 Testing launcher script help..."
          /tmp/test-launcher.sh --help
          
          # Test shell mode (non-GUI)
          echo "🔍 Testing shell mode..."
          timeout 30s docker run --rm \
            --name openterface-shell-test \
            openterface-test \
            bash -c "
              echo '✅ Shell mode test started'
              whoami
              echo 'Groups:' && groups
              echo 'Qt check:' && dpkg -l | grep libqt6 | wc -l
              echo '✅ Shell mode test completed'
            " || echo "ℹ️  Shell test completed (timeout expected)"
          
          # Test GUI mode with virtual display
          echo "🧪 Testing GUI mode with virtual display..."
          
          # Install virtual display dependencies
          sudo apt-get update -y
          sudo apt-get install -y xvfb scrot imagemagick x11-utils xauth
          
          # Start virtual display with better configuration
          export DISPLAY=:98
          echo "🖥️  Starting virtual display with optimized settings..."
          Xvfb :98 -screen 0 1280x720x24 -ac +extension GLX +render -noreset &
          XVFB_PID=$!
          
          # Wait for Xvfb to start properly
          sleep 5
          
          # Verify X server is running and suppress keyboard warnings
          if DISPLAY=:98 xdpyinfo >/dev/null 2>&1; then
            echo "✅ Virtual display started successfully on $DISPLAY"
            
            # Set up X11 authentication to reduce warnings
            export XAUTHORITY=/tmp/.Xauth$$
            xauth generate :98 . trusted 2>/dev/null || echo "ℹ️  Xauth setup skipped (not critical)"
            
            # Suppress keyboard warnings by setting minimal keymap
            DISPLAY=:98 setxkbmap us 2>/dev/null || echo "ℹ️  Keyboard setup skipped (not critical)"
            
            # Create screenshots directory
            mkdir -p integration-screenshots
            
            # Test GUI launcher with virtual display and enhanced debugging
            echo "🚀 Testing GUI launcher with virtual display..."
            timeout 20s bash -c "
              echo '🔍 Pre-launch environment check:'
              echo 'DISPLAY=' \$DISPLAY
              echo 'X server responding:' \$(DISPLAY=:98 xdpyinfo >/dev/null 2>&1 && echo 'YES' || echo 'NO')
              echo 'Available X extensions:' \$(DISPLAY=:98 xdpyinfo -queryExtensions 2>/dev/null | grep -c 'on display' || echo 'none')
              
              echo '🚀 Starting launcher script...'
              /tmp/test-launcher.sh --no-hardware &
              LAUNCHER_PID=\$!
              echo 'Launcher PID:' \$LAUNCHER_PID
              
              # Wait for application to start
              echo '⏰ Waiting 5 seconds for application startup...'
              sleep 5
              
              # Check launcher process status
              if ps -p \$LAUNCHER_PID > /dev/null 2>&1; then
                echo '✅ Launcher process is still running'
              else
                echo '⚠️  Launcher process has exited'
                wait \$LAUNCHER_PID
                launcher_exit_code=\$?
                echo 'Launcher exit code:' \$launcher_exit_code
              fi
              
              # Enhanced container detection
              echo '🔍 Enhanced container analysis...'
              container_count=\$(docker ps | grep -c openterface || echo '0')
              echo 'Openterface containers running:' \$container_count
              
              if [ \$container_count -gt 0 ]; then
                echo '📋 Container details:'
                for container in \$(docker ps --format '{{.Names}}' | grep openterface); do
                  echo \"Container: \$container\"
                  echo \"Status: \$(docker inspect \$container --format='{{.State.Status}}')\"
                  echo \"Started: \$(docker inspect \$container --format='{{.State.StartedAt}}')\"
                  echo \"Processes: \$(docker exec \$container ps aux | wc -l) total\"
                  gui_count=\$(docker exec \$container ps aux | grep -E 'qt\\|Qt\\|openterface\\|GUI' | wc -l 2>/dev/null || echo '0')
                  echo \"GUI processes: \$gui_count\"
                  echo \"---\"
                done
              fi
              
              # Take initial screenshot with enhanced analysis
              echo '📸 Taking initial screenshot...'
              if DISPLAY=:98 scrot integration-screenshots/launcher_initial.png 2>/dev/null; then
                echo '✅ Initial screenshot captured'
              else
                echo '⚠️  Initial screenshot failed - checking X server...'
                DISPLAY=:98 xwininfo -root 2>/dev/null | head -5 || echo 'X server not responding'
              fi
              
              # Check for running containers
              echo '🔍 Checking for running containers...'
              if docker ps | grep -q openterface; then
                echo '✅ Openterface containers detected:'
                docker ps | grep openterface
                
                # Get detailed logs from containers
                echo '📋 Container logs analysis:'
                for container in \$(docker ps --format '{{.Names}}' | grep openterface); do
                  echo \"=== Logs for \$container (last 10 lines) ===\"
                  docker logs --tail 10 \$container 2>&1
                  echo \"\"
                done
              else
                echo 'ℹ️  No openterface containers running yet'
              fi
              
              # Wait more time
              echo '⏰ Waiting additional 5 seconds...'
              sleep 5
              
              # Check X server window tree for any windows
              echo '🪟 Detailed window analysis...'
              window_tree=\$(DISPLAY=:98 xwininfo -tree -root 2>/dev/null || echo 'Window tree unavailable')
              echo \"Window tree output:\"
              echo \"\$window_tree\" | head -15
              
              window_count=\$(echo \"\$window_tree\" | grep -c 'child' || echo '0')
              echo \"Total child windows detected: \$window_count\"
              
              # Take progress screenshot with enhanced analysis
              echo '📸 Taking progress screenshot...'
              if DISPLAY=:98 scrot integration-screenshots/launcher_progress.png 2>/dev/null; then
                echo '✅ Progress screenshot captured'
                
                # Immediately analyze the screenshot
                if command -v identify >/dev/null 2>&1; then
                  mean_val=\$(identify -ping -format '%[mean]' integration-screenshots/launcher_progress.png 2>/dev/null || echo '0')
                  echo \"Progress screenshot mean value: \${mean_val%.*}\"
                  if [ \"\${mean_val%.*}\" -gt 100 ]; then
                    echo '🎉 Non-black content detected in progress screenshot!'
                  else
                    echo '⚫ Progress screenshot appears black/empty'
                  fi
                fi
              else
                echo '⚠️  Progress screenshot failed'
              fi"
              
              # Take final screenshot with enhanced analysis
              echo '📸 Taking final screenshot...'
              if DISPLAY=:98 scrot integration-screenshots/launcher_final.png 2>/dev/null; then
                echo '✅ Final screenshot captured'
                
                # Analyze final screenshot immediately
                if command -v identify >/dev/null 2>&1; then
                  mean_val=\$(identify -ping -format '%[mean]' integration-screenshots/launcher_final.png 2>/dev/null || echo '0')
                  echo \"Final screenshot mean value: \${mean_val%.*}\"
                  if [ \"\${mean_val%.*}\" -gt 100 ]; then
                    echo '🎉 Non-black content detected in final screenshot!'
                  else
                    echo '⚫ Final screenshot appears black/empty'
                  fi
                fi
              else
                echo '⚠️  Final screenshot failed'
              fi
              
              # Final container and process analysis
              echo '🔍 Final system analysis...'
              echo 'Docker containers still running:'
              docker ps | grep openterface || echo 'None'
              
              echo 'Launcher process status:'
              if ps -p \$LAUNCHER_PID > /dev/null 2>&1; then
                echo 'Launcher still running'
              else
                echo 'Launcher has exited'
              fi
              
              # Kill launcher process
              kill \$LAUNCHER_PID 2>/dev/null || true
              
              echo '✅ GUI launcher test completed'
            " || echo "ℹ️  GUI launcher test completed (timeout expected)"
            
            # Analyze screenshots with detailed information and troubleshooting
            echo "📊 Launcher Screenshot Analysis & Troubleshooting:"
            echo "====================================================="
            if [ -d "integration-screenshots" ]; then
              printf "%-30s | %-8s | %-12s | %-15s | %s\n" "Filename" "Size" "Dimensions" "Mean Color" "Content Status"
              echo "$(printf '%.0s-' {1..85})"
              
              black_screen_count=0
              total_screenshots=0
              
              for img in integration-screenshots/*.png; do
                if [ -f "$img" ]; then
                  total_screenshots=$((total_screenshots + 1))
                  filename=$(basename "$img")
                  filesize=$(ls -lh "$img" | awk '{print $5}')
                  
                  # Get image dimensions
                  dimensions=$(identify "$img" 2>/dev/null | awk '{print $3}' | head -1 || echo "Unknown")
                  
                  # Get mean color value to detect content
                  mean_color=$(identify -ping -format "%[mean]" "$img" 2>/dev/null || echo "0")
                  mean_value=${mean_color%.*}
                  
                  # Determine content status
                  if [ "$mean_value" -gt 2000 ]; then
                    content_status="✅ Content detected"
                  elif [ "$mean_value" -gt 500 ]; then
                    content_status="⚠️  Minimal content"
                  else
                    content_status="❌ Likely blank/black"
                    black_screen_count=$((black_screen_count + 1))
                  fi
                  
                  printf "%-30s | %-8s | %-12s | %-15s | %s\n" "$filename" "$filesize" "$dimensions" "$mean_value" "$content_status"
                  
                  # Show histogram for content detection and additional analysis
                  if command -v convert >/dev/null 2>&1; then
                    echo "  📊 Color histogram: $(convert "$img" -format "%c" histogram:info:- 2>/dev/null | head -3 | tail -1 || echo 'Cannot analyze')"
                    
                    # For black screens, provide additional debugging
                    if [ "$mean_value" -lt 100 ]; then
                      echo "  🔍 Black screen detected - checking for minimal variations..."
                      # Check if it's completely uniform black or has some variation
                      unique_colors=$(convert "$img" -format "%k" info: 2>/dev/null || echo "1")
                      echo "  🎨 Unique colors in image: $unique_colors"
                      
                      # Check for any non-black pixels
                      non_black_pixels=$(convert "$img" -threshold 1% -format "%[fx:w*h-mean*w*h]" info: 2>/dev/null || echo "0")
                      echo "  ⚫ Non-black pixels: ${non_black_pixels%.*}"
                    fi
                  fi
                fi
              done
              
              echo ""
              echo "🔍 BLACK SCREEN ANALYSIS:"
              echo "========================"
              echo "Total screenshots: $total_screenshots"
              echo "Black screens: $black_screen_count"
              
              if [ "$black_screen_count" -eq "$total_screenshots" ] && [ "$total_screenshots" -gt 0 ]; then
                echo ""
                echo "❌ ALL SCREENSHOTS ARE BLACK - TROUBLESHOOTING GUIDE:"
                echo "======================================================"
                echo ""
                echo "🔍 Possible causes and solutions:"
                echo ""
                echo "1. 📱 Application startup time:"
                echo "   - The GUI application may need more time to start"
                echo "   - Solution: Increase wait times in the test script"
                echo ""
                echo "2. 🖥️  Display configuration issues:"
                echo "   - Virtual display may not be properly configured"
                echo "   - Solution: Check Xvfb parameters and DISPLAY variable"
                echo ""
                echo "3. 🐳 Container GUI forwarding:"
                echo "   - X11 forwarding from container to virtual display may be failing"
                echo "   - Solution: Verify X11 socket mounting and permissions"
                echo ""
                echo "4. 🚀 Application launch failure:"
                echo "   - The GUI application may be failing to start silently"
                echo "   - Solution: Check container logs for Qt/application errors"
                echo ""
                echo "5. 🎨 Graphics/OpenGL issues:"
                echo "   - Virtual display may not support required graphics features"
                echo "   - Solution: Add software rendering flags or different Xvfb extensions"
                echo ""
                echo "📋 Recommended next steps:"
                echo "1. Check container logs above for error messages"
                echo "2. Verify that containers are actually starting"
                echo "3. Try running the launcher script locally with longer timeouts"
                echo "4. Consider adding QT_QPA_PLATFORM=xcb environment variable"
                echo "5. Test with software rendering: QT_QUICK_BACKEND=software"
              fi
              
              # Summary for launcher screenshots
              total_launcher_screenshots=$(find integration-screenshots/ -name "*.png" 2>/dev/null | wc -l)
              if [ "$total_launcher_screenshots" -gt 0 ]; then
                content_launcher_screenshots=$(find integration-screenshots/ -name "*.png" -exec identify -ping -format "%[mean]\n" {} \; 2>/dev/null | awk -F. '{if($1 > 500) count++} END {print count+0}')
                echo ""
                echo "📈 Launcher Test Summary:"
                echo "  Total screenshots: $total_launcher_screenshots"
                echo "  With content: $content_launcher_screenshots"
                if [ "$total_launcher_screenshots" -gt 0 ]; then
                  success_rate=$(( content_launcher_screenshots * 100 / total_launcher_screenshots ))
                  echo "  Success rate: ${success_rate}%"
                  
                  if [ "$success_rate" -eq 0 ]; then
                    echo ""
                    echo "⚠️  RECOMMENDATION: Consider the following improvements:"
                    echo "   1. Increase application startup wait time (current: 5-10 seconds)"
                    echo "   2. Add Qt environment variables for virtual display compatibility"
                    echo "   3. Use software rendering instead of hardware acceleration"
                    echo "   4. Check if the application requires additional dependencies"
                  fi
                else
                  echo "  Success rate: 0%"
                fi
              else
                echo "⚠️  No launcher screenshots captured"
              fi
            else
              echo "❌ No integration-screenshots directory found"
            fi
            
            # Clean up virtual display
            kill $XVFB_PID 2>/dev/null || true
            
          else
            echo "❌ Virtual display failed to start"
          fi
          
          # Clean up
          docker rmi openterface-test || true

      - name: Upload integration test screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-screenshots
          path: integration-screenshots/
          if-no-files-found: warn
