name: ARM64 GNU/Linux Build

on:
  push:
    branches: [ "dev" ]
    paths:
      - 'docker/Dockerfile.arm64'
      - '.github/workflows/arm64-linux-build.yml'
      - 'CMakeLists.txt'
      - 'src/**'
      - 'ui/**'
      - 'host/**'
      - 'video/**'
      - 'serial/**'
      - 'scripts/**'
  pull_request:
    branches: [ "dev" ]
  workflow_call:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: false
        default: '6.6.3'
        type: string
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt Version'
        required: false
        default: '6.6.3'
        type: string
  workflow_run:
    workflows: ["Build ARM64 Qt Environment"]
    types:
      - completed

permissions:
  contents: read
  packages: write

env:
  QT_VERSION: ${{ github.event.inputs.qt_version || '6.6.3' }}
  QT_IMAGE: openterface-arm64-qt
  APP_IMAGE: openterface-arm64-app
  CACHE_BASE_KEY: arm64-app-${{ github.event.inputs.qt_version || '6.6.3' }}

jobs:
  build-app:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.actor }}/${{ env.APP_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push application
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.arm64
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            QT_IMAGE=ghcr.io/${{ github.actor }}/${{ env.QT_IMAGE }}:${{ env.QT_VERSION }}-latest
            QT_VERSION=${{ env.QT_VERSION }}
          cache-from: type=gha,scope=arm64-app
          cache-to: type=gha,mode=max,scope=arm64-app

      - name: Extract binary from Docker image (if built)
        if: github.event_name != 'pull_request'
        run: |
          # Use the first tag from the metadata output
          IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
          echo "Using image tag: $IMAGE_TAG"
          
          # Pull the image with platform specification
          docker pull --platform linux/arm64 $IMAGE_TAG
          
          # Create a temporary container and copy the binary
          docker create --name temp-container --platform linux/arm64 $IMAGE_TAG
          docker cp temp-container:/app/build/openterfaceQT ./openterfaceQT-arm64-linux
          docker rm temp-container
          
          # Make binary executable and create artifact
          chmod +x ./openterfaceQT-arm64-linux
          file ./openterfaceQT-arm64-linux

      - name: Upload binary artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: openterfaceQT-arm64-linux
          path: ./openterfaceQT-arm64-linux
          retention-days: 30
