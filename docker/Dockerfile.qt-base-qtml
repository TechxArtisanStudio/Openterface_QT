# Build Qt base components (qtbase + qtshadertools)
ARG BASE_IMAGE=ghcr.io/techxartisanstudio/openterface-qtbuild-ffmpeg:ubuntu-22.04-amd64
ARG UBUNTU_VERSION=22.04
ARG TARGETARCH=amd64
FROM ${BASE_IMAGE}

WORKDIR ${BUILD_DIR}

# Define base modules to build (include qtwayland for Wayland platform plugin)
ENV MODULES="qtbase qtshadertools qtwayland"
ENV DOWNLOAD_BASE_URL="https://download.qt.io/archive/qt/${QT_MAJOR_VERSION}/${QT_VERSION}/submodules"
ENV CMAKE_COMMON_FLAGS="-Wno-dev -DCMAKE_POLICY_DEFAULT_CMP0177=NEW -DCMAKE_POLICY_DEFAULT_CMP0174=NEW"

# Download and extract Qt base modules
RUN for module in ${MODULES}; do \
        echo "Downloading $module..."; \
        curl -L -o "$module.zip" "${DOWNLOAD_BASE_URL}/$module-everywhere-src-${QT_VERSION}.zip" && \
        unzip -q "$module.zip" && \
        mv "$module-everywhere-src-${QT_VERSION}" "$module" && \
        rm "$module.zip"; \
    done

# Build libxcb-cursor from source (static) - Build early to ensure Qt finds it
RUN echo "Building libxcb-cursor from source..." && \
    cd /tmp && \
    # Install additional build dependencies for libxcb-cursor
    apt-get install -y \
        libxcb-render0-dev \
        libxcb-image0-dev \
        libxrender-dev \
        libx11-dev \
        libxcb-xfixes0-dev \
        # Wayland build dependencies
        libwayland-dev \
        wayland-protocols \
        libxkbcommon-dev \
        libdrm-dev \
        libgbm-dev \
        libegl1-mesa-dev \
        libgles2-mesa-dev && \
    # Download and build libxcb-cursor
    curl -L -o libxcb-cursor.tar.gz "https://xcb.freedesktop.org/dist/libxcb-cursor-0.1.5.tar.gz" && \
    tar -xzf libxcb-cursor.tar.gz && \
    cd libxcb-cursor-0.1.5 && \
    # Configure for static build with proper prefix
    ./configure \
        --prefix="${INSTALL_PREFIX}" \
        --enable-static \
        --disable-shared \
        --with-pic \
        CFLAGS="-fPIC" \
        CPPFLAGS="-I${INSTALL_PREFIX}/include" \
        LDFLAGS="-L${INSTALL_PREFIX}/lib" \
        PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" && \
    # Build and install to INSTALL_PREFIX
    make -j$(nproc) && \
    make install && \
    # Also copy static archive to system multi-arch location for discovery by CMake
    ARCH="$(dpkg-architecture -qDEB_HOST_MULTIARCH)" && \
    mkdir -p "/usr/lib/${ARCH}" && \
    if [ -f "${INSTALL_PREFIX}/lib/libxcb-cursor.a" ]; then \
        cp -f "${INSTALL_PREFIX}/lib/libxcb-cursor.a" "/usr/lib/${ARCH}/libxcb-cursor.a"; \
    fi && \
    # Verify installation
    ls -la "${INSTALL_PREFIX}/lib/libxcb-cursor.a" && \
    pkg-config --exists xcb-cursor && echo "✓ libxcb-cursor static library installed successfully" || echo "⚠ libxcb-cursor pkg-config not found" && \
    # Print xcb-cursor configuration
        echo "xcb-cursor pkg-config info:" && \
        ARCH="$(dpkg-architecture -qDEB_HOST_MULTIARCH)" && \
        PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig:/usr/lib/${ARCH}/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}" \
            pkg-config --cflags --libs xcb-cursor && \
    # Clean up
    rm -rf libxcb-cursor-0.1.5 libxcb-cursor.tar.gz && \
    echo "✓ libxcb-cursor static build completed"

# Build qtbase first (foundation)
RUN echo "Building qtbase with static XCB..." && \
    cd ${BUILD_DIR}/qtbase && \
    mkdir -p build && \
    cd build && \
    cmake -GNinja \
        ${CMAKE_COMMON_FLAGS} \
        -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
        -DBUILD_SHARED_LIBS=OFF \
        -DFEATURE_dbus=ON \
        -DFEATURE_sql=OFF \
        -DFEATURE_testlib=OFF \
        -DFEATURE_icu=OFF \
        -DFEATURE_opengl=ON \
        -DFEATURE_xlib=ON \
        -DFEATURE_xcb_xlib=ON \
        -DFEATURE_xkbcommon=ON \
        -DFEATURE_xkbcommon_x11=ON \
        -DTEST_xcb_syslibs=ON \
        -DFEATURE_system_xcb=OFF \
        -DFEATURE_xcb=ON \
        -DFEATURE_xcb_cursor=ON \
        -DFEATURE_xcb_icccm=ON \
        -DFEATURE_xcb_image=ON \
        -DFEATURE_xcb_keysyms=ON \
        -DFEATURE_xcb_randr=ON \
        -DFEATURE_xcb_render=ON \
        -DFEATURE_xcb_renderutil=ON \
        -DFEATURE_xcb_shape=ON \
        -DFEATURE_xcb_shm=ON \
        -DFEATURE_xcb_sync=ON \
        -DFEATURE_xcb_util=ON \
        -DFEATURE_xcb_xfixes=ON \
        -DFEATURE_xcb_xinerama=ON \
        -DFEATURE_xcb_xkb=ON \
        -DFEATURE_xcb_glx=ON \
        -DQT_FEATURE_clang=OFF \
        -DFEATURE_clang=ON \
        .. && \
    ninja -j 2 && \
    ninja install -j 2

# Build qtshadertools
RUN echo "Building qtshadertools..." && \
    cd ${BUILD_DIR}/qtshadertools && \
    mkdir -p build && \
    cd build && \
    cmake -GNinja \
        ${CMAKE_COMMON_FLAGS} \
        -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
        -DBUILD_SHARED_LIBS=OFF \
        -DCMAKE_EXE_LINKER_FLAGS="-lfontconfig -lfreetype" \
        .. && \
    ninja && \
    ninja install

# Build qtwayland (client-only)
RUN echo "Building qtwayland (client)..." && \
    cd ${BUILD_DIR}/qtwayland && \
    mkdir -p build && \
    cd build && \
    cmake -GNinja \
        ${CMAKE_COMMON_FLAGS} \
        -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
        -DBUILD_SHARED_LIBS=OFF \
        -DQT_FEATURE_wayland_server=OFF \
        -DQT_FEATURE_wayland_client=ON \
        -DQt6WaylandClient_DIR="${INSTALL_PREFIX}/lib/cmake/Qt6WaylandClient" \
        -DQt6_DIR="${INSTALL_PREFIX}/lib/cmake/Qt6" \
        .. && \
    ninja -j 2 && \
    ninja install -j 2

# Create verification script for base components
RUN mkdir -p ${INSTALL_PREFIX}/bin && \
    echo '#!/bin/bash' > ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo "Qt Base Components Verification"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo "================================"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'QT_DIR="/opt/Qt6"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo "Qt version: $(${QT_DIR}/bin/qmake -query QT_VERSION)"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo "Qt installation prefix: $(${QT_DIR}/bin/qmake -query QT_INSTALL_PREFIX)"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo -e "\nChecking Qt base modules:"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'MODULES="Core Widgets Gui OpenGL"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'for module in $MODULES; do' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo '    if [ -f "${QT_DIR}/lib/libQt6${module}.a" ]; then' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo '        echo "✓ Qt${module} static library found"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo '    else' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo '        echo "✗ Qt${module} static library NOT found"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo '    fi' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'done' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    echo 'echo -e "\nQt base components build ready!"' >> ${INSTALL_PREFIX}/bin/verify-qt-base.sh && \
    chmod +x ${INSTALL_PREFIX}/bin/verify-qt-base.sh

# Set Qt environment variables
ENV PATH="${INSTALL_PREFIX}/bin:${PATH}"
ENV QT_PLUGIN_PATH="${INSTALL_PREFIX}/plugins"
ENV QML2_IMPORT_PATH="${INSTALL_PREFIX}/qml"
ENV LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib"
ENV PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"

# Verify Qt base installation
RUN ${INSTALL_PREFIX}/bin/verify-qt-base.sh

# Clean up source files
RUN cd ${BUILD_DIR} && \
    for module in ${MODULES}; do \
        rm -rf "$module"; \
    done

WORKDIR /workspace
