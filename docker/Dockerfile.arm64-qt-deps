ARG BASE_IMAGE=ubuntu:22.04
FROM ${BASE_IMAGE}

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    pkg-config \
    wget \
    curl \
    git \
    autoconf \
    automake \
    libtool \
    autoconf-archive \
    meson \
    bison \
    flex \
    python3-pip \
    libc6-dev \
    zlib1g-dev \
    gperf \
    sudo \
    autotools-dev \
    gettext \
    libxml2-utils \
    libxml2-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    xsltproc \
    && rm -rf /var/lib/apt/lists/*

# Set installation prefix
ENV INSTALL_PREFIX=/opt/qt-deps
ENV PKG_CONFIG_PATH="$INSTALL_PREFIX/lib/pkgconfig:$INSTALL_PREFIX/share/pkgconfig"

# Create build directory
WORKDIR /tmp/qt-build

# Version definitions
ARG XKBCOMMON_VERSION=1.7.0
ARG DBUS_VERSION=1.15.8
ARG ALSA_VERSION=1.2.10
ARG GLIB_VERSION=2.78.3
ARG SNDFILE_VERSION=1.2.0
ARG XCB_PROTO_VERSION=1.16.0
ARG XCB_VERSION=1.16
ARG XCB_UTIL_VERSION=0.4.1
ARG XCB_CURSOR_VERSION=0.1.5
ARG XCB_UTIL_WM_VERSION=0.4.2
ARG XCB_UTIL_KEYSYMS_VERSION=0.4.1
ARG XAU_VERSION=1.0.11
ARG XORG_MACROS_VERSION=1.19.3
ARG XPROTO_VERSION=7.0.31
ARG XRANDR_VERSION=1.5.1
ARG XRENDER_VERSION=0.9.10
ARG XTRANS_VERSION=1.5.0
ARG XEXTPROTO_VERSION=7.3.0
ARG XEXT_VERSION=1.3.5
ARG X11_VERSION=1.8.7
ARG RANDRPROTO_VERSION=1.5.0
ARG RENDERPROTO_VERSION=0.11.1
ARG LIBXDMCP_VERSION=1.1.4
ARG XKB_CONFIG_VERSION=2.41
ARG XORGPROTO_VERSION=2023.2
ARG EXPAT_VERSION=2.5.0
ARG GPERF_VERSION=3.1
ARG PULSEAUDIO_VERSION=16.1


# Build ALSA lib
RUN curl -L -o alsa.tar.bz2 "https://www.alsa-project.org/files/pub/lib/alsa-lib-${ALSA_VERSION}.tar.bz2" && \
    tar xf alsa.tar.bz2 && \
    cd "alsa-lib-${ALSA_VERSION}" && \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf alsa.tar.bz2 "alsa-lib-${ALSA_VERSION}"

# Build libsndfile
RUN curl -L -o sndfile.tar.xz "https://github.com/libsndfile/libsndfile/releases/download/${SNDFILE_VERSION}/libsndfile-${SNDFILE_VERSION}.tar.xz" && \
    tar xf sndfile.tar.xz && \
    cd "libsndfile-${SNDFILE_VERSION}" && \
    CFLAGS="-fPIC" CXXFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf sndfile.tar.xz "libsndfile-${SNDFILE_VERSION}"

# Build libpulse
RUN curl -L -o libpulse.tar.xz "https://www.freedesktop.org/software/pulseaudio/releases/pulseaudio-${PULSEAUDIO_VERSION}.tar.xz" && \
    tar xf libpulse.tar.xz && \
    cd "pulseaudio-${PULSEAUDIO_VERSION}" && \
    mkdir -p build && cd build && \
    meson setup --prefix=$INSTALL_PREFIX \
        -Ddefault_library=static \
        -Ddoxygen=false \
        -Ddaemon=false \
        -Dtests=false \
        -Dman=false \
        -Dudev=disabled \
        -Dsystemd=disabled \
        -Dbluez5=disabled \
        -Dgtk=disabled \
        -Dopenssl=disabled \
        -Dorc=disabled \
        -Dsoxr=disabled \
        -Dspeex=disabled \
        -Dwebrtc-aec=disabled \
        -Dx11=disabled \
        .. && \
    ninja && \
    ninja install && \
    cd ../.. && rm -rf libpulse.tar.xz "pulseaudio-${PULSEAUDIO_VERSION}"

# Build GLib
RUN curl -L -o glib.tar.xz "https://download.gnome.org/sources/glib/2.78/glib-${GLIB_VERSION}.tar.xz" && \
    tar xf glib.tar.xz && \
    cd "glib-${GLIB_VERSION}" && \
    mkdir -p build && cd build && \
    meson setup --prefix=$INSTALL_PREFIX \
        -Ddefault_library=static \
        -Dtests=false \
        .. && \
    ninja && \
    ninja install && \
    cd ../.. && rm -rf glib.tar.xz "glib-${GLIB_VERSION}"

# Build libexpat
RUN curl -L -o libexpat.tar.bz2 "https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-${EXPAT_VERSION}.tar.bz2" && \
    tar xf libexpat.tar.bz2 && \
    cd "expat-${EXPAT_VERSION}" && \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libexpat.tar.bz2 "expat-${EXPAT_VERSION}"

# Build gperf
RUN curl -L -o gperf.tar.gz "https://ftp.gnu.org/gnu/gperf/gperf-${GPERF_VERSION}.tar.gz" && \
    tar xf gperf.tar.gz && \
    cd "gperf-${GPERF_VERSION}" && \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf gperf.tar.gz "gperf-${GPERF_VERSION}"

# Build X11 protocol headers - xorg-macros (needed first)
RUN curl -L -o xorg-macros.tar.bz2 "https://www.x.org/releases/individual/util/util-macros-${XORG_MACROS_VERSION}.tar.bz2" && \
    tar xf xorg-macros.tar.bz2 && \
    cd "util-macros-${XORG_MACROS_VERSION}" && \
    ./configure --prefix=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xorg-macros.tar.bz2 "util-macros-${XORG_MACROS_VERSION}"

# Build xorgproto (provides core X11 headers)
RUN curl -L -o xorgproto.tar.xz "https://www.x.org/releases/individual/proto/xorgproto-${XORGPROTO_VERSION}.tar.xz" && \
    tar xf xorgproto.tar.xz && \
    cd "xorgproto-${XORGPROTO_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xorgproto.tar.xz "xorgproto-${XORGPROTO_VERSION}"

# Build xtrans
RUN curl -L -o xtrans.tar.xz "https://www.x.org/releases/individual/lib/xtrans-${XTRANS_VERSION}.tar.xz" && \
    tar xf xtrans.tar.xz && \
    cd "xtrans-${XTRANS_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xtrans.tar.xz "xtrans-${XTRANS_VERSION}"

# Build libXau
RUN curl -L -o libXau.tar.xz "https://www.x.org/releases/individual/lib/libXau-${XAU_VERSION}.tar.xz" && \
    tar xf libXau.tar.xz && \
    cd "libXau-${XAU_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libXau.tar.xz "libXau-${XAU_VERSION}"

# Build libXdmcp
RUN curl -L -o libXdmcp.tar.gz "https://www.x.org/releases/individual/lib/libXdmcp-${LIBXDMCP_VERSION}.tar.gz" && \
    tar xf libXdmcp.tar.gz && \
    cd "libXdmcp-${LIBXDMCP_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libXdmcp.tar.gz "libXdmcp-${LIBXDMCP_VERSION}"

# Build xcb-proto
RUN curl -L -o xcb-proto.tar.xz "https://xorg.freedesktop.org/archive/individual/proto/xcb-proto-${XCB_PROTO_VERSION}.tar.xz" && \
    tar xf xcb-proto.tar.xz && \
    cd "xcb-proto-${XCB_PROTO_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-proto.tar.xz "xcb-proto-${XCB_PROTO_VERSION}"

# Build libxcb
RUN curl -L -o libxcb.tar.xz "https://xorg.freedesktop.org/archive/individual/lib/libxcb-${XCB_VERSION}.tar.xz" && \
    tar xf libxcb.tar.xz && \
    cd "libxcb-${XCB_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX \
        --enable-static \
        --disable-shared \
        --enable-xinput \
        --enable-xkb \
        --enable-xcb-xinput && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libxcb.tar.xz "libxcb-${XCB_VERSION}"

# Build libX11
RUN curl -L -o libX11.tar.xz "https://www.x.org/releases/individual/lib/libX11-${X11_VERSION}.tar.xz" && \
    tar xf libX11.tar.xz && \
    cd "libX11-${X11_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX \
        --enable-static \
        --disable-shared \
        --disable-specs \
        --disable-devel-docs \
        --without-xmlto \
        --without-fop && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libX11.tar.xz "libX11-${X11_VERSION}"

# Build libXext
RUN curl -L -o libXext.tar.xz "https://www.x.org/releases/individual/lib/libXext-${XEXT_VERSION}.tar.xz" && \
    tar xf libXext.tar.xz && \
    cd "libXext-${XEXT_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX \
        --enable-static \
        --disable-shared \
        --disable-specs \
        --without-xmlto \
        --without-fop && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libXext.tar.xz "libXext-${XEXT_VERSION}"

# Build libXrender
RUN curl -L -o libXrender.tar.gz "https://www.x.org/releases/individual/lib/libXrender-${XRENDER_VERSION}.tar.gz" && \
    tar xf libXrender.tar.gz && \
    cd "libXrender-${XRENDER_VERSION}" && \
    CFLAGS="-fPIC" PKG_CONFIG_PATH="$INSTALL_PREFIX/lib/pkgconfig:$INSTALL_PREFIX/share/pkgconfig" \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libXrender.tar.gz "libXrender-${XRENDER_VERSION}"

# Build libXrandr
RUN curl -L -o libXrandr.tar.gz "https://www.x.org/releases/individual/lib/libXrandr-${XRANDR_VERSION}.tar.gz" && \
    tar xf libXrandr.tar.gz && \
    cd "libXrandr-${XRANDR_VERSION}" && \
    CPPFLAGS="-I$INSTALL_PREFIX/include" \
    CFLAGS="-fPIC -I$INSTALL_PREFIX/include" \
    LDFLAGS="-L$INSTALL_PREFIX/lib" \
    RANDR_CFLAGS="-I$INSTALL_PREFIX/include" \
    RANDR_LIBS="-L$INSTALL_PREFIX/lib -lX11 -lXext -lXrender" \
    ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared --with-pic && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf libXrandr.tar.gz "libXrandr-${XRANDR_VERSION}"

# Build xcb-util
RUN curl -L -o xcb-util.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-${XCB_UTIL_VERSION}.tar.gz" && \
    tar xf xcb-util.tar.gz && \
    cd "xcb-util-${XCB_UTIL_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util.tar.gz "xcb-util-${XCB_UTIL_VERSION}"

# Build xcb-util-wm
RUN curl -L -o xcb-util-wm.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-wm-${XCB_UTIL_WM_VERSION}.tar.gz" && \
    tar xf xcb-util-wm.tar.gz && \
    cd "xcb-util-wm-${XCB_UTIL_WM_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util-wm.tar.gz "xcb-util-wm-${XCB_UTIL_WM_VERSION}"

# Build xcb-util-keysyms
RUN curl -L -o xcb-util-keysyms.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION}.tar.gz" && \
    tar xf xcb-util-keysyms.tar.gz && \
    cd "xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util-keysyms.tar.gz "xcb-util-keysyms-${XCB_UTIL_KEYSYMS_VERSION}"

# Build xcb-util-image
RUN curl -L -o xcb-util-image.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-image-0.4.1.tar.gz" && \
    tar xf xcb-util-image.tar.gz && \
    cd "xcb-util-image-0.4.1" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util-image.tar.gz "xcb-util-image-0.4.1"

# Build xcb-util-renderutil
RUN curl -L -o xcb-util-renderutil.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-renderutil-0.3.10.tar.gz" && \
    tar xf xcb-util-renderutil.tar.gz && \
    cd "xcb-util-renderutil-0.3.10" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util-renderutil.tar.gz "xcb-util-renderutil-0.3.10"

# Build xcb-util-cursor
RUN curl -L -o xcb-util-cursor.tar.gz "https://xcb.freedesktop.org/dist/xcb-util-cursor-${XCB_CURSOR_VERSION}.tar.gz" && \
    tar xf xcb-util-cursor.tar.gz && \
    cd "xcb-util-cursor-${XCB_CURSOR_VERSION}" && \
    CFLAGS="-fPIC" ./configure --prefix=$INSTALL_PREFIX --enable-static --disable-shared && \
    make -j$(nproc) && \
    make install && \
    cd .. && rm -rf xcb-util-cursor.tar.gz "xcb-util-cursor-${XCB_CURSOR_VERSION}"

# Build xkeyboard-config
RUN curl -L -o xkeyboard-config.tar.xz "https://www.x.org/archive/individual/data/xkeyboard-config/xkeyboard-config-${XKB_CONFIG_VERSION}.tar.xz" && \
    tar xf xkeyboard-config.tar.xz && \
    cd "xkeyboard-config-${XKB_CONFIG_VERSION}" && \
    mkdir -p build && cd build && \
    meson setup --prefix=$INSTALL_PREFIX -Ddefault_library=static .. && \
    ninja && \
    ninja install && \
    cd ../.. && rm -rf xkeyboard-config.tar.xz "xkeyboard-config-${XKB_CONFIG_VERSION}"

# Update PKG_CONFIG_PATH and verify installations
ENV PKG_CONFIG_PATH="$INSTALL_PREFIX/lib/pkgconfig:$INSTALL_PREFIX/share/pkgconfig"
ENV LD_LIBRARY_PATH="$INSTALL_PREFIX/lib"
ENV CMAKE_PREFIX_PATH="$INSTALL_PREFIX"
ENV PATH="$INSTALL_PREFIX/bin:$PATH"

# Verify key dependencies
RUN pkg-config --exists x11 && echo "✓ x11.pc found" || echo "✗ x11.pc not found" && \
    pkg-config --exists xext && echo "✓ xext.pc found" || echo "✗ xext.pc not found" && \
    pkg-config --exists xrender && echo "✓ xrender.pc found" || echo "✗ xrender.pc not found" && \
    pkg-config --exists xcb && echo "✓ xcb.pc found" || echo "✗ xcb.pc not found" && \
    pkg-config --exists xcb-cursor && echo "✓ xcb-cursor.pc found" || echo "✗ xcb-cursor.pc not found"

# Clean up build directory
RUN rm -rf /tmp/qt-build

WORKDIR /workspace
